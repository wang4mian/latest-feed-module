---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { getArticles, supabase } from '../lib/supabase';

// 获取购物车中的文章 (carted状态)
const filters = { 
  status: 'carted',
  limit: 100,
  offset: 0
};

let cartArticles: any[] = [];
let totalCount = 0;
let error: any = null;

try {
  const result = await getArticles(filters);
  cartArticles = result.data || [];
  totalCount = result.count || 0;
} catch (err) {
  console.error('Failed to load cart articles:', err);
  error = err;
}

// 格式化日期
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('zh-CN', {
    month: 'short', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// 获取评分徽章样式类
const getScoreBadgeClass = (score: number) => {
  if (score >= 80) return 'high';
  if (score >= 60) return 'medium';
  return 'low';
};

// 分类显示
const getCategoryText = (category: string) => {
  const chineseCategories = ['应用', '商业', '科研', '生态', '医疗', '建筑', '军政', '产品', '材料', '汽车'];
  if (chineseCategories.includes(category)) {
    return category;
  }
  
  const categoryMap: { [key: string]: string } = {
    'Core Equipment': '核心设备',
    'Supply Chain': '供应链',
    'Market Trends': '市场趋势',
    'Technological Innovation': '技术创新',
    'Business Models': '商业模式'
  };
  return categoryMap[category] || category || '未分类';
};

// 获取分类样式类
const getCategoryClass = (category: string) => {
  const classMap: { [key: string]: string } = {
    '应用': 'equipment',
    '商业': 'business', 
    '科研': 'innovation',
    '生态': 'supply',
    '医疗': 'trends',
    '建筑': 'equipment',
    '军政': 'business',
    '产品': 'equipment',
    '材料': 'supply',
    '汽车': 'trends',
    'Core Equipment': 'equipment',
    'Supply Chain': 'supply',
    'Market Trends': 'trends',
    'Technological Innovation': 'innovation',
    'Business Models': 'business'
  };
  return classMap[category] || 'equipment';
};
---

<DashboardLayout title="购物车 - KUATO">
  <!-- Page Header -->
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">购物车 🛒</h1>
        <p class="mt-1 text-sm text-gray-500">
          已选文章: <span class="text-blue-600">{totalCount} 篇</span>
          <span class="text-gray-400 ml-2">• 在这里反复掂量，决定是否采用或移除</span>
        </p>
      </div>
      <div class="flex items-center space-x-3">
        <span class="text-sm text-gray-500">刷新时间: </span>
        <span class="text-sm font-medium text-gray-900" id="refresh-time"></span>
      </div>
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="dashboard-card mb-6">
    <div class="dashboard-card-body">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <h3 class="text-lg font-medium text-gray-900">批量操作</h3>
          <span class="text-sm text-gray-500">对选中的文章进行批量处理</span>
        </div>
        <div class="flex items-center space-x-3">
          <button 
            id="batch-adopt-btn"
            class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors"
            onclick="batchAdopt()"
          >
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
            批量采用
          </button>
          <button 
            id="batch-remove-btn"
            class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
            onclick="batchRemove()"
          >
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd" />
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
            批量移除
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Error State -->
  {error && (
    <div class="dashboard-card mb-6">
      <div class="dashboard-card-body">
        <div class="flex items-center p-4 text-red-800 bg-red-50 rounded-lg">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <span>加载购物车失败: {error.message}</span>
        </div>
      </div>
    </div>
  )}

  <!-- Empty Cart State -->
  {cartArticles.length === 0 ? (
    <div class="dashboard-card">
      <div class="dashboard-card-body text-center py-12">
        <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6H19M7 13l-1.5 6m0 0h4.5m-4.5 0L6 20.5M9 19.5h3.5M17 21a2 2 0 100-4 2 2 0 000 4zM9 21a2 2 0 100-4 2 2 0 000 4z" />
        </svg>
        <h3 class="mt-4 text-lg font-medium text-gray-900">购物车为空</h3>
        <p class="mt-2 text-sm text-gray-500">
          还没有选中任何文章。<br>
          前往 <a href="/pool" class="text-blue-600 hover:text-blue-500">文章池</a> 选择感兴趣的文章吧！
        </p>
      </div>
    </div>
  ) : (
    <!-- Articles List -->
    <div class="space-y-4">
      {cartArticles.map((article) => (
        <div class="dashboard-card hover:shadow-md transition-shadow" data-article-id={article.id}>
          <div class="dashboard-card-body">
            <div class="flex items-start space-x-4">
              <!-- Checkbox -->
              <div class="flex-shrink-0 pt-1">
                <input 
                  type="checkbox" 
                  class="article-checkbox h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  data-article-id={article.id}
                />
              </div>

              <!-- AI Score Badge -->
              <div class="flex-shrink-0">
                <span class={`status-badge ${getScoreBadgeClass(article.ai_score || 0)} text-lg font-bold px-3 py-2`}>
                  {article.ai_score || 0}
                </span>
              </div>

              <!-- Article Content -->
              <div class="flex-1 min-w-0">
                <!-- Header -->
                <div class="flex items-start justify-between mb-2">
                  <div class="flex-1">
                    <h3 class="text-lg font-medium text-gray-900 hover:text-blue-600">
                      <a href={article.link} target="_blank" class="hover:underline">
                        {article.title}
                      </a>
                    </h3>
                    <div class="flex items-center mt-1 space-x-4 text-sm text-gray-500">
                      <span>{formatDate(article.created_at)}</span>
                      {article.rss_sources?.name && (
                        <span class="text-blue-600">{article.rss_sources.name}</span>
                      )}
                      <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
                        购物车
                      </span>
                    </div>
                  </div>
                  
                  <!-- Category Tag -->
                  {article.ai_category && (
                    <span class={`category-tag ${getCategoryClass(article.ai_category)} ml-4`}>
                      {getCategoryText(article.ai_category)}
                    </span>
                  )}
                </div>

                <!-- Summary -->
                {article.ai_summary && (
                  <div class="mb-3">
                    <p class="text-sm text-gray-600 line-clamp-2" id={`summary-${article.id}`}>
                      {article.ai_summary}
                    </p>
                    <button 
                      onclick={`toggleExpand('${article.id}')`}
                      class="text-xs text-blue-600 hover:text-blue-500 mt-1"
                      id={`expand-btn-${article.id}`}
                    >
                      显示更多 ↓
                    </button>
                  </div>
                )}

                <!-- Full Content (Initially Hidden) -->
                <div class="hidden bg-gray-50 rounded-lg p-3 mb-3 text-sm text-gray-700" id={`full-content-${article.id}`}>
                  <div class="mb-2">
                    <span class="font-medium text-gray-900">完整内容:</span>
                  </div>
                  <div class="whitespace-pre-wrap max-h-64 overflow-y-auto">
                    {article.full_content || '暂无完整内容'}
                  </div>
                </div>

                <!-- AI Tags -->
                {article.ai_tags && article.ai_tags.length > 0 && (
                  <div class="mb-3">
                    <div class="flex flex-wrap gap-1">
                      {article.ai_tags.map((tag: string) => (
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                          #{tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                <!-- Actions -->
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <button 
                      class="inline-flex items-center px-3 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full hover:bg-green-200 transition-colors"
                      onclick={`adoptFromCart('${article.id}')`}
                    >
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                      </svg>
                      确认采用
                    </button>
                    <button 
                      class="inline-flex items-center px-3 py-1 text-xs font-medium text-red-700 bg-red-100 rounded-full hover:bg-red-200 transition-colors"
                      onclick={`removeFromCart('${article.id}')`}
                    >
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                      </svg>
                      移出购物车
                    </button>
                  </div>
                  
                  <a 
                    href={article.link} 
                    target="_blank"
                    class="text-sm text-blue-600 hover:text-blue-500"
                  >
                    查看原文 →
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  )}

</DashboardLayout>

<script>
  // Set refresh time
  document.addEventListener('DOMContentLoaded', () => {
    const refreshTime = document.getElementById('refresh-time');
    if (refreshTime) {
      refreshTime.textContent = new Date().toLocaleString('zh-CN');
    }
  });

  // Toggle expand functionality
  function toggleExpand(articleId) {
    const summary = document.getElementById(`summary-${articleId}`);
    const fullContent = document.getElementById(`full-content-${articleId}`);
    const expandBtn = document.getElementById(`expand-btn-${articleId}`);
    
    if (fullContent.classList.contains('hidden')) {
      // Expand
      summary.classList.add('line-clamp-none');
      summary.classList.remove('line-clamp-2');
      fullContent.classList.remove('hidden');
      expandBtn.textContent = '收起 ↑';
    } else {
      // Collapse
      summary.classList.remove('line-clamp-none');
      summary.classList.add('line-clamp-2');
      fullContent.classList.add('hidden');
      expandBtn.textContent = '显示更多 ↓';
    }
  };

  // Individual article actions
  async function adoptFromCart(articleId) {
    try {
      const response = await fetch('/api/articles/adopt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: articleId })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // 显示成功提示
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg z-50';
        
        if (result.contentUpdated) {
          notification.innerHTML = '✅ 文章已采用，内容已用Jina AI更新<br><small>高质量内容已准备就绪</small>';
        } else {
          notification.textContent = '✅ 文章已采用，已添加到编辑工作台';
        }
        
        document.body.appendChild(notification);
        
        // 从购物车中移除该文章卡片
        const articleCard = document.querySelector(`[data-article-id="${articleId}"]`);
        if (articleCard) {
          articleCard.style.transition = 'opacity 0.3s ease-out';
          articleCard.style.opacity = '0.5';
          setTimeout(() => {
            articleCard.remove();
            updateCartCount();
          }, 300);
        }
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      } else {
        alert('操作失败，请重试');
      }
    } catch (error) {
      alert('操作失败：' + error.message);
    }
  }

  async function removeFromCart(articleId) {
    try {
      const response = await fetch('/api/articles/remove-from-cart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: articleId })
      });
      
      if (response.ok) {
        // 显示成功提示
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-gray-100 border border-gray-400 text-gray-700 px-4 py-3 rounded-lg shadow-lg z-50';
        notification.textContent = '🗑️ 文章已移出购物车';
        document.body.appendChild(notification);
        
        // 从购物车中移除该文章卡片
        const articleCard = document.querySelector(`[data-article-id="${articleId}"]`);
        if (articleCard) {
          articleCard.style.transition = 'opacity 0.3s ease-out';
          articleCard.style.opacity = '0.5';
          setTimeout(() => {
            articleCard.remove();
            updateCartCount();
          }, 300);
        }
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      } else {
        alert('操作失败，请重试');
      }
    } catch (error) {
      alert('操作失败：' + error.message);
    }
  }

  // Batch operations
  function getSelectedArticles() {
    const checkboxes = document.querySelectorAll('.article-checkbox:checked');
    return Array.from(checkboxes).map(cb => cb.getAttribute('data-article-id'));
  }

  async function batchAdopt() {
    const selectedIds = getSelectedArticles();
    if (selectedIds.length === 0) {
      alert('请先选择要采用的文章');
      return;
    }

    if (!confirm(`确定要采用选中的 ${selectedIds.length} 篇文章吗？`)) {
      return;
    }

    try {
      const response = await fetch('/api/articles/batch-adopt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // 显示成功提示
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg z-50';
        notification.innerHTML = `✅ ${selectedIds.length} 篇文章已批量采用<br><small>已添加到编辑工作台</small>`;
        document.body.appendChild(notification);
        
        // 移除已选中的文章卡片
        selectedIds.forEach(id => {
          const articleCard = document.querySelector(`[data-article-id="${id}"]`);
          if (articleCard) {
            articleCard.style.transition = 'opacity 0.3s ease-out';
            articleCard.style.opacity = '0.5';
            setTimeout(() => {
              articleCard.remove();
              updateCartCount();
            }, 300);
          }
        });
        
        setTimeout(() => {
          notification.remove();
        }, 4000);
      } else {
        alert('批量操作失败，请重试');
      }
    } catch (error) {
      alert('批量操作失败：' + error.message);
    }
  }

  async function batchRemove() {
    const selectedIds = getSelectedArticles();
    if (selectedIds.length === 0) {
      alert('请先选择要移除的文章');
      return;
    }

    if (!confirm(`确定要从购物车移除选中的 ${selectedIds.length} 篇文章吗？`)) {
      return;
    }

    try {
      const response = await fetch('/api/articles/batch-remove-from-cart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: selectedIds })
      });
      
      if (response.ok) {
        // 显示成功提示
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-gray-100 border border-gray-400 text-gray-700 px-4 py-3 rounded-lg shadow-lg z-50';
        notification.innerHTML = `🗑️ ${selectedIds.length} 篇文章已移出购物车`;
        document.body.appendChild(notification);
        
        // 移除已选中的文章卡片
        selectedIds.forEach(id => {
          const articleCard = document.querySelector(`[data-article-id="${id}"]`);
          if (articleCard) {
            articleCard.style.transition = 'opacity 0.3s ease-out';
            articleCard.style.opacity = '0.5';
            setTimeout(() => {
              articleCard.remove();
              updateCartCount();
            }, 300);
          }
        });
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      } else {
        alert('批量操作失败，请重试');
      }
    } catch (error) {
      alert('批量操作失败：' + error.message);
    }
  }

  function updateCartCount() {
    const countElement = document.querySelector('.text-blue-600');
    if (countElement) {
      const currentCount = parseInt(countElement.textContent);
      if (currentCount > 0) {
        countElement.textContent = (currentCount - 1) + ' 篇';
      }
    }

    // 检查是否购物车为空，显示空状态
    const remainingArticles = document.querySelectorAll('[data-article-id]').length;
    if (remainingArticles === 0) {
      setTimeout(() => {
        location.reload(); // 刷新页面显示空购物车状态
      }, 500);
    }
  }

  // 将函数暴露到全局作用域供HTML onclick使用
  window.toggleExpand = toggleExpand;
  window.adoptFromCart = adoptFromCart;
  window.removeFromCart = removeFromCart;
  window.batchAdopt = batchAdopt;
  window.batchRemove = batchRemove;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-none {
    display: block;
    -webkit-line-clamp: unset;
  }
</style>