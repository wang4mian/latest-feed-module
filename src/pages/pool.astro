---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import { getArticles, supabase } from '../lib/supabase';

// 获取URL参数
const url = Astro.url;
const category = url.searchParams.get('category') || '';
const source = url.searchParams.get('source') || '';
const search = url.searchParams.get('search') || '';
const status = url.searchParams.get('status') || '';
const sort = url.searchParams.get('sort') || 'ai_score_desc';
const page = parseInt(url.searchParams.get('page') || '1');
const limit = 100;
const offset = (page - 1) * limit;

// 构建筛选条件
const filters: any = { 
  limit, 
  offset
  // 文章池显示待处理的文章：ready_for_review 和 reviewed
};
if (category) filters.category = category;
if (source) filters.source = source;
if (search) filters.search = search;
if (status) filters.status = status;
if (sort) filters.sort = sort;

let articles: any[] = [];
let totalCount = 0;
let error: any = null;

try {
  const result = await getArticles(filters);
  articles = result.data || [];
  totalCount = result.count || 0;
} catch (err) {
  console.error('Failed to load articles:', err);
  error = err;
}

// 获取所有RSS源用于筛选下拉框
let allSources: any[] = [];
try {
  const { data: sourcesData } = await supabase
    .from('rss_sources')
    .select('id, name, vertical_name')
    .eq('is_active', true)
    .order('name');
  allSources = sourcesData || [];
} catch (err) {
  console.error('Failed to load RSS sources:', err);
}

// 格式化日期
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('zh-CN', {
    month: 'short', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// 获取评分徽章样式类
const getScoreBadgeClass = (score: number) => {
  if (score >= 80) return 'high';
  if (score >= 60) return 'medium';
  return 'low';
};

// 分类显示
const getCategoryText = (category: string) => {
  const categoryMap: { [key: string]: string } = {
    'Core Equipment': '核心设备',
    'Supply Chain': '供应链',
    'Market Trends': '市场趋势',
    'Technological Innovation': '技术创新',
    'Business Models': '商业模式'
  };
  return categoryMap[category] || category || '未分类';
};

// 获取分类样式类
const getCategoryClass = (category: string) => {
  const classMap: { [key: string]: string } = {
    'Core Equipment': 'equipment',
    'Supply Chain': 'supply',
    'Market Trends': 'trends',
    'Technological Innovation': 'innovation',
    'Business Models': 'business'
  };
  return classMap[category] || 'equipment';
};

const totalPages = Math.ceil(totalCount / limit);

// 生成分页链接
const generatePageUrl = (pageNum: number) => {
  const params = new URLSearchParams(url.search);
  params.set('page', pageNum.toString());
  return `${url.pathname}?${params.toString()}`;
};
---

<DashboardLayout title="文章池 - KUATO">
  <!-- Page Header -->
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">文章池 - 增材制造狗</h1>
        <p class="mt-1 text-sm text-gray-500">
          筛选结果: <span class="text-blue-600">{totalCount} 篇</span>
        </p>
      </div>
      <div class="flex items-center space-x-3">
        <button 
          id="generate-memo-btn"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          生成选题备忘录
        </button>
        <span class="text-sm text-gray-500">刷新时间: </span>
        <span class="text-sm font-medium text-gray-900" id="refresh-time"></span>
      </div>
    </div>
  </div>

  <!-- Topic Memo Modal -->
  <div id="memo-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900">今日选题备忘录 - 增材制造狗</h3>
          <button id="close-memo-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div id="memo-content" class="space-y-4">
          <!-- Memo content will be loaded here -->
        </div>
        <div class="flex justify-end mt-6 space-x-3">
          <button id="close-memo-btn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
            关闭
          </button>
          <button id="copy-memo-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
            复制备忘录
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Filters -->
  <div class="dashboard-card mb-6">
    <div class="dashboard-card-body">
      <form class="flex flex-wrap items-center gap-4" method="get" action="/pool">
        <!-- Search -->
        <div class="flex-1 min-w-64">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input 
              type="search" 
              name="search" 
              value={search} 
              placeholder="搜索标题或内容..." 
              class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <!-- Category Filter -->
        <div class="min-w-40">
          <select name="category" class="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            <option value="">全部分类</option>
            <option value="Core Equipment" selected={category === 'Core Equipment'}>核心设备</option>
            <option value="Supply Chain" selected={category === 'Supply Chain'}>供应链</option>
            <option value="Market Trends" selected={category === 'Market Trends'}>市场趋势</option>
            <option value="Technological Innovation" selected={category === 'Technological Innovation'}>技术创新</option>
            <option value="Business Models" selected={category === 'Business Models'}>商业模式</option>
          </select>
        </div>

        <!-- Status Filter -->
        <div class="min-w-40">
          <select name="status" class="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            <option value="">待处理文章</option>
            <option value="ready_for_review" selected={status === 'ready_for_review'}>待审核 (≥50分)</option>
            <option value="auto_rejected" selected={status === 'auto_rejected'}>AI过滤 (<50分)</option>
            <option value="adopted" selected={status === 'adopted'}>已采用</option>
            <option value="archived" selected={status === 'archived'}>已归档</option>
            <option value="draft" selected={status === 'draft'}>草稿</option>
          </select>
        </div>

        <!-- RSS Source Filter -->
        <div class="min-w-48">
          <select name="source" class="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            <option value="">全部来源</option>
            {allSources.map((s) => (
              <option value={s.id} selected={source === s.id.toString()}>
                {s.name}
                {s.vertical_name && ` (${s.vertical_name})`}
              </option>
            ))}
          </select>
        </div>

        <!-- Sort -->
        <div class="min-w-40">
          <select name="sort" class="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
            <option value="ai_score_desc" selected={sort === 'ai_score_desc'}>评分 高→低</option>
            <option value="ai_score_asc" selected={sort === 'ai_score_asc'}>评分 低→高</option>
            <option value="created_at_desc" selected={sort === 'created_at_desc'}>最新发布</option>
            <option value="created_at_asc" selected={sort === 'created_at_asc'}>最早发布</option>
          </select>
        </div>

        <!-- Submit -->
        <button 
          type="submit" 
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
          </svg>
          筛选
        </button>

        {(category || source || search || status || sort !== 'ai_score_desc') && (
          <a 
            href="/pool" 
            class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            重置
          </a>
        )}
      </form>
    </div>
  </div>

  <!-- Error State -->
  {error && (
    <div class="dashboard-card mb-6">
      <div class="dashboard-card-body">
        <div class="flex items-center p-4 text-red-800 bg-red-50 rounded-lg">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <span>加载文章失败: {error.message}</span>
        </div>
      </div>
    </div>
  )}

  <!-- Articles List -->
  {articles.length === 0 ? (
    <div class="dashboard-card">
      <div class="dashboard-card-body text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">暂无文章</h3>
        <p class="mt-1 text-sm text-gray-500">当前筛选条件下没有找到文章，请尝试调整筛选条件。</p>
      </div>
    </div>
  ) : (
    <div class="space-y-4">
      {articles.map((article) => (
        <div class="dashboard-card hover:shadow-md transition-shadow" data-article-id={article.id}>
          <div class="dashboard-card-body">
            <div class="flex items-start space-x-4">
              <!-- AI Score Badge -->
              <div class="flex-shrink-0">
                <span class={`status-badge ${getScoreBadgeClass(article.ai_score || 0)} text-lg font-bold px-3 py-2`}>
                  {article.ai_score || 0}
                </span>
              </div>

              <!-- Article Content -->
              <div class="flex-1 min-w-0">
                <!-- Header -->
                <div class="flex items-start justify-between mb-2">
                  <div class="flex-1">
                    <h3 class="text-lg font-medium text-gray-900 hover:text-blue-600">
                      <a href={article.link} target="_blank" class="hover:underline">
                        {article.title}
                      </a>
                    </h3>
                    <div class="flex items-center mt-1 space-x-4 text-sm text-gray-500">
                      <span>{formatDate(article.created_at)}</span>
                      {article.rss_sources?.name && (
                        <span class="text-blue-600">{article.rss_sources.name}</span>
                      )}
                    </div>
                  </div>
                  
                  <!-- Category Tag -->
                  {article.ai_category && (
                    <span class={`category-tag ${getCategoryClass(article.ai_category)} ml-4`}>
                      {getCategoryText(article.ai_category)}
                    </span>
                  )}
                </div>

                <!-- Summary -->
                {article.ai_summary && (
                  <div class="mb-3">
                    <p class="text-sm text-gray-600 line-clamp-2" id={`summary-${article.id}`}>
                      {article.ai_summary}
                    </p>
                    <button 
                      onclick={`toggleExpand('${article.id}')`}
                      class="text-xs text-blue-600 hover:text-blue-500 mt-1"
                      id={`expand-btn-${article.id}`}
                    >
                      显示更多 ↓
                    </button>
                  </div>
                )}

                <!-- Full Content (Initially Hidden) -->
                <div class="hidden bg-gray-50 rounded-lg p-3 mb-3 text-sm text-gray-700" id={`full-content-${article.id}`}>
                  <div class="mb-2">
                    <span class="font-medium text-gray-900">完整内容:</span>
                  </div>
                  <div class="whitespace-pre-wrap max-h-64 overflow-y-auto">
                    {article.full_content || '暂无完整内容'}
                  </div>
                </div>

                <!-- AI Reason -->
                {article.ai_reason && (
                  <div class="bg-blue-50 rounded-lg p-3 mb-3">
                    <p class="text-sm text-blue-800">
                      <span class="font-medium">AI评价:</span> {article.ai_reason}
                    </p>
                  </div>
                )}

                <!-- Strategic Implication (Initially Hidden) -->
                {article.ai_strategic_implication && (
                  <div class="hidden bg-amber-50 rounded-lg p-3 mb-3" id={`strategic-${article.id}`}>
                    <p class="text-sm text-amber-800">
                      <span class="font-medium">战略意义:</span> {article.ai_strategic_implication}
                    </p>
                  </div>
                )}

                <!-- Actions -->
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <button 
                      class="inline-flex items-center px-3 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full hover:bg-green-200 transition-colors"
                      onclick={`adoptArticle('${article.id}')`}
                    >
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                      </svg>
                      采用
                    </button>
                    <button 
                      class="inline-flex items-center px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-full hover:bg-gray-200 transition-colors"
                      onclick={`archiveArticle('${article.id}')`}
                    >
                      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                      归档
                    </button>
                  </div>
                  
                  <a 
                    href={article.link} 
                    target="_blank"
                    class="text-sm text-blue-600 hover:text-blue-500"
                  >
                    查看原文 →
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  )}

  <!-- Pagination -->
  {totalPages > 1 && (
    <div class="dashboard-card mt-6">
      <div class="dashboard-card-body">
        <div class="flex items-center justify-between">
          <div class="text-sm text-gray-700">
            显示 {(page - 1) * limit + 1} 到 {Math.min(page * limit, totalCount)} 条，共 {totalCount} 条
          </div>
          <div class="flex items-center space-x-2">
            {page > 1 && (
              <>
                <a href={generatePageUrl(1)} class="inline-flex items-center px-2 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-500 bg-white hover:bg-gray-50" title="首页">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
                  </svg>
                </a>
                <a href={generatePageUrl(page - 1)} class="inline-flex items-center px-2 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-500 bg-white hover:bg-gray-50" title="上一页">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                </a>
              </>
            )}
            
            {Array.from({length: Math.min(5, totalPages)}, (_, i) => {
              const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i;
              return (
                <a 
                  href={generatePageUrl(pageNum)} 
                  class={`inline-flex items-center px-3 py-2 text-sm font-medium rounded-md ${
                    pageNum === page 
                      ? 'bg-blue-600 text-white' 
                      : 'border border-gray-300 text-gray-500 bg-white hover:bg-gray-50'
                  }`}
                >
                  {pageNum}
                </a>
              );
            })}
            
            {page < totalPages && (
              <>
                <a href={generatePageUrl(page + 1)} class="inline-flex items-center px-2 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-500 bg-white hover:bg-gray-50" title="下一页">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
                <a href={generatePageUrl(totalPages)} class="inline-flex items-center px-2 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-500 bg-white hover:bg-gray-50" title="末页">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                  </svg>
                </a>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  )}

</DashboardLayout>

<script>
  // Set refresh time
  document.addEventListener('DOMContentLoaded', () => {
    const refreshTime = document.getElementById('refresh-time');
    if (refreshTime) {
      refreshTime.textContent = new Date().toLocaleString('zh-CN');
    }
  });

  // Toggle expand functionality
  function toggleExpand(articleId) {
    const summary = document.getElementById(`summary-${articleId}`);
    const fullContent = document.getElementById(`full-content-${articleId}`);
    const strategic = document.getElementById(`strategic-${articleId}`);
    const expandBtn = document.getElementById(`expand-btn-${articleId}`);
    
    if (fullContent.classList.contains('hidden')) {
      // Expand
      summary.classList.add('line-clamp-none');
      summary.classList.remove('line-clamp-2');
      fullContent.classList.remove('hidden');
      if (strategic) strategic.classList.remove('hidden');
      expandBtn.textContent = '收起 ↑';
    } else {
      // Collapse
      summary.classList.remove('line-clamp-none');
      summary.classList.add('line-clamp-2');
      fullContent.classList.add('hidden');
      if (strategic) strategic.classList.add('hidden');
      expandBtn.textContent = '显示更多 ↓';
    }
  };

  // Article actions
  async function adoptArticle(articleId) {
    try {
      const response = await fetch('/api/articles/adopt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: articleId })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // 显示成功提示，包含内容更新状态
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg z-50';
        
        if (result.contentUpdated) {
          notification.innerHTML = '✅ 文章已采用，内容已用Jina AI更新<br><small>高质量内容已准备就绪</small>';
        } else {
          notification.textContent = '✅ 文章已采用，已添加到编辑工作台';
        }
        
        document.body.appendChild(notification);
        
        // 立即从DOM中移除该文章卡片
        const articleCard = document.querySelector(`[data-article-id="${articleId}"]`);
        if (articleCard) {
          articleCard.style.transition = 'opacity 0.3s ease-out';
          articleCard.style.opacity = '0.5';
          setTimeout(() => {
            articleCard.remove();
            // 更新文章计数
            const countElement = document.querySelector('.text-blue-600');
            if (countElement) {
              const currentCount = parseInt(countElement.textContent);
              if (currentCount > 0) {
                countElement.textContent = (currentCount - 1) + ' 篇';
              }
            }
          }, 300);
        }
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      } else {
        alert('操作失败，请重试');
      }
    } catch (error) {
      alert('操作失败：' + error.message);
    }
  };

  async function archiveArticle(articleId) {
    try {
      const response = await fetch('/api/articles/archive', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: articleId })
      });
      
      if (response.ok) {
        // 显示成功提示
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-gray-100 border border-gray-400 text-gray-700 px-4 py-3 rounded-lg shadow-lg z-50';
        notification.textContent = '📁 文章已归档';
        document.body.appendChild(notification);
        
        // 立即从DOM中移除该文章卡片
        const articleCard = document.querySelector(`[data-article-id="${articleId}"]`);
        if (articleCard) {
          articleCard.style.transition = 'opacity 0.3s ease-out';
          articleCard.style.opacity = '0.5';
          setTimeout(() => {
            articleCard.remove();
            // 更新文章计数
            const countElement = document.querySelector('.text-blue-600');
            if (countElement) {
              const currentCount = parseInt(countElement.textContent);
              if (currentCount > 0) {
                countElement.textContent = (currentCount - 1) + ' 篇';
              }
            }
          }, 300);
        }
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      } else {
        alert('操作失败，请重试');
      }
    } catch (error) {
      alert('操作失败：' + error.message);
    }
  };

  // Generate Topic Memo
  async function generateTopicMemo() {
    const generateBtn = document.getElementById('generate-memo-btn');
    const memoModal = document.getElementById('memo-modal');
    const memoContent = document.getElementById('memo-content');
    
    try {
      generateBtn.textContent = '生成中...';
      generateBtn.disabled = true;
      
      const response = await fetch('/api/topic-memo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ date_filter: 'today' })
      });
      
      if (response.ok) {
        const result = await response.json();
        
        if (result.success && result.memo) {
          // Display memo in modal
          displayMemo(result.memo);
          memoModal.classList.remove('hidden');
        } else {
          alert(result.message || '暂无可用文章生成备忘录');
        }
      } else {
        alert('生成失败，请重试');
      }
    } catch (error) {
      alert('生成失败：' + error.message);
    } finally {
      generateBtn.innerHTML = '<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>生成选题备忘录';
      generateBtn.disabled = false;
    }
  }

  function displayMemo(memo) {
    const memoContent = document.getElementById('memo-content');
    
    let html = `
      <div class="bg-purple-50 rounded-lg p-4 mb-4">
        <h4 class="font-semibold text-purple-900 mb-2">📋 备忘录概览</h4>
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div><span class="font-medium">日期:</span> ${memo.memo_date}</div>
          <div><span class="font-medium">候选文章:</span> ${memo.total_candidates} 篇</div>
          <div class="col-span-2"><span class="font-medium">今日主题:</span> ${memo.daily_theme}</div>
        </div>
      </div>
      
      <div class="bg-blue-50 rounded-lg p-4 mb-4">
        <h4 class="font-semibold text-blue-900 mb-2">💡 编辑建议</h4>
        <p class="text-sm text-blue-800">${memo.editor_notes}</p>
      </div>
      
      <div class="space-y-3">
        <h4 class="font-semibold text-gray-900 mb-3">📰 推荐文章排序</h4>
    `;
    
    memo.recommendations.forEach((rec, index) => {
      const priorityClass = rec.priority === '高优先级' ? 'border-red-200 bg-red-50' : 
                           rec.priority === '中优先级' ? 'border-yellow-200 bg-yellow-50' : 
                           'border-gray-200 bg-gray-50';
      
      const priorityBadge = rec.priority === '高优先级' ? 'bg-red-100 text-red-800' : 
                           rec.priority === '中优先级' ? 'bg-yellow-100 text-yellow-800' : 
                           'bg-gray-100 text-gray-800';
      
      html += `
        <div class="border-2 ${priorityClass} rounded-lg p-4">
          <div class="flex items-start justify-between mb-2">
            <h5 class="font-medium text-gray-900">${index + 1}. ${rec.series_category}类快讯</h5>
            <span class="px-2 py-1 text-xs font-medium ${priorityBadge} rounded-full">${rec.priority}</span>
          </div>
          <p class="text-sm text-gray-700 mb-2"><span class="font-medium">核心要点:</span> ${rec.brief_summary}</p>
          <p class="text-sm text-gray-600 mb-2"><span class="font-medium">编译价值:</span> ${rec.compilation_value}</p>
          <p class="text-sm text-gray-500"><span class="font-medium">目标读者:</span> ${rec.target_audience}</p>
          <div class="mt-2">
            <button 
              onclick="selectArticleForCompilation('${rec.article_id}')" 
              class="text-xs px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
            >
              选择编译此文章
            </button>
          </div>
        </div>
      `;
    });
    
    html += '</div>';
    memoContent.innerHTML = html;
  }

  function selectArticleForCompilation(articleId) {
    // Find the article and adopt it for compilation
    adoptArticle(articleId);
    
    // Close memo modal
    document.getElementById('memo-modal').classList.add('hidden');
    
    // Show success message
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg z-50';
    notification.innerHTML = '✅ 文章已选中并采用<br><small>请前往编辑工作台进行快讯编译</small>';
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 4000);
  }

  function copyMemoToClipboard() {
    const memoContent = document.getElementById('memo-content');
    const textContent = memoContent.innerText;
    
    navigator.clipboard.writeText(textContent).then(() => {
      const copyBtn = document.getElementById('copy-memo-btn');
      const originalText = copyBtn.textContent;
      copyBtn.textContent = '已复制 ✓';
      copyBtn.classList.add('bg-green-600');
      
      setTimeout(() => {
        copyBtn.textContent = originalText;
        copyBtn.classList.remove('bg-green-600');
      }, 2000);
    }).catch(() => {
      alert('复制失败，请手动复制');
    });
  }

  // Modal controls
  document.getElementById('generate-memo-btn').addEventListener('click', generateTopicMemo);
  document.getElementById('close-memo-modal').addEventListener('click', () => {
    document.getElementById('memo-modal').classList.add('hidden');
  });
  document.getElementById('close-memo-btn').addEventListener('click', () => {
    document.getElementById('memo-modal').classList.add('hidden');
  });
  document.getElementById('copy-memo-btn').addEventListener('click', copyMemoToClipboard);

  // 将函数暴露到全局作用域供HTML onclick使用
  window.toggleExpand = toggleExpand;
  window.adoptArticle = adoptArticle;
  window.archiveArticle = archiveArticle;
  window.selectArticleForCompilation = selectArticleForCompilation;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-none {
    display: block;
    -webkit-line-clamp: unset;
  }
</style>