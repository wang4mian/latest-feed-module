---
import Layout from '@/layouts/Layout.astro';
import { supabase } from '@/lib/supabase';

// 获取URL参数
const url = Astro.url;
const status = url.searchParams.get('status') || '';
const search = url.searchParams.get('search') || '';
const page = parseInt(url.searchParams.get('page') || '1');
const limit = 20;
const offset = (page - 1) * limit;

// 构建查询
let query = supabase
  .from('rss_sources')
  .select('*', { count: 'exact' })
  .order('last_fetch_at', { ascending: false, nullsFirst: false });

if (status === 'active') {
  query = query.eq('is_active', true);
} else if (status === 'inactive') {
  query = query.eq('is_active', false);
} else if (status === 'error') {
  query = query.gt('error_count', 0);
}

if (search) {
  query = query.or(`name.ilike.%${search}%,url.ilike.%${search}%,vertical_name.ilike.%${search}%`);
}

query = query.range(offset, offset + limit - 1);

const { data: sources, error, count } = await query;

if (error) {
  console.error('获取RSS源失败:', error);
}

const totalPages = count ? Math.ceil(count / limit) : 1;
const hasSources = sources && sources.length > 0;

// 生成分页链接
const generatePageUrl = (pageNum: number) => {
  const params = new URLSearchParams(url.search);
  params.set('page', pageNum.toString());
  return `${url.pathname}?${params.toString()}`;
};

// 统计数据
const totalSources = count || 0;
const activeSources = sources?.filter(s => s.is_active).length || 0;
const errorSources = sources?.filter(s => s.error_count > 0).length || 0;
---

<Layout title="RSS源管理 - 制造业情报系统">
  <div class="uk-section uk-section-small">
    <div class="uk-container uk-container-expand">
      <!-- 页面标题 -->
      <div class="uk-flex uk-flex-between uk-flex-middle uk-margin-medium-bottom">
        <div>
          <h1 class="uk-heading-medium uk-margin-remove-bottom">
            <span uk-icon="rss" class="uk-margin-small-right"></span>
            RSS源管理
          </h1>
          <p class="uk-text-meta uk-margin-remove-top">
            管理和监控所有情报来源
          </p>
        </div>
        
        <div class="uk-flex uk-flex-middle">
          <!-- 添加新源 -->
          <button class="uk-button uk-button-primary uk-margin-small-right" 
                  onclick="UIkit.modal('#add-source-modal').show()">
            <span uk-icon="plus"></span> 添加RSS源
          </button>
          
          <!-- 批量操作 -->
          <div class="uk-button-group uk-margin-small-right">
            <button class="uk-button uk-button-default" id="bulk-enable-btn">
              <span uk-icon="check"></span> 批量启用
            </button>
            <button class="uk-button uk-button-default" id="bulk-disable-btn">
              <span uk-icon="ban"></span> 批量禁用
            </button>
          </div>
          
          <!-- 测试连接 -->
          <button class="uk-button uk-button-secondary" id="test-all-btn">
            <span uk-icon="refresh"></span> 测试全部
          </button>
        </div>
      </div>

      <!-- 统计卡片 -->
      <div class="uk-grid-match uk-child-width-1-4@m uk-child-width-1-2@s uk-margin-bottom" uk-grid>
        <div>
          <div class="uk-card uk-card-default uk-card-body uk-text-center">
            <span uk-icon="icon: database; ratio: 2" class="uk-text-primary"></span>
            <h3 class="uk-card-title uk-margin-small-top">{totalSources}</h3>
            <p class="uk-text-muted">总RSS源</p>
          </div>
        </div>
        
        <div>
          <div class="uk-card uk-card-default uk-card-body uk-text-center">
            <span uk-icon="icon: check-circle; ratio: 2" class="uk-text-success"></span>
            <h3 class="uk-card-title uk-margin-small-top">{activeSources}</h3>
            <p class="uk-text-muted">活跃源</p>
          </div>
        </div>
        
        <div>
          <div class="uk-card uk-card-default uk-card-body uk-text-center">
            <span uk-icon="icon: warning; ratio: 2" class="uk-text-warning"></span>
            <h3 class="uk-card-title uk-margin-small-top">{errorSources}</h3>
            <p class="uk-text-muted">异常源</p>
          </div>
        </div>
        
        <div>
          <div class="uk-card uk-card-default uk-card-body uk-text-center">
            <span uk-icon="icon: clock; ratio: 2" class="uk-text-muted"></span>
            <h3 class="uk-card-title uk-margin-small-top">
              {totalSources > 0 ? Math.round((activeSources / totalSources) * 100) : 0}%
            </h3>
            <p class="uk-text-muted">活跃率</p>
          </div>
        </div>
      </div>

      <!-- 筛选和搜索 -->
      <div class="uk-card uk-card-default uk-margin-bottom">
        <div class="uk-card-body">
          <div class="uk-grid-small uk-flex-middle" uk-grid>
            <div class="uk-width-auto">
              <span class="uk-text-meta">筛选:</span>
            </div>
            
            <div class="uk-width-auto">
              <div class="uk-button-group">
                <a href="/sources" class={`uk-button uk-button-small ${!status ? 'uk-button-primary' : 'uk-button-default'}`}>
                  全部
                </a>
                <a href="/sources?status=active" class={`uk-button uk-button-small ${status === 'active' ? 'uk-button-primary' : 'uk-button-default'}`}>
                  活跃
                </a>
                <a href="/sources?status=inactive" class={`uk-button uk-button-small ${status === 'inactive' ? 'uk-button-primary' : 'uk-button-default'}`}>
                  禁用
                </a>
                <a href="/sources?status=error" class={`uk-button uk-button-small ${status === 'error' ? 'uk-button-primary' : 'uk-button-default'}`}>
                  异常
                </a>
              </div>
            </div>
            
            <div class="uk-width-expand">
              <form method="get" class="uk-search uk-search-default uk-width-1-1">
                <input name="search" class="uk-search-input" type="search" 
                       placeholder="搜索RSS源名称、URL或分类..." 
                       value={search}>
                <span uk-search-icon></span>
                {status && <input type="hidden" name="status" value={status}>}
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- RSS源列表 -->
      {hasSources ? (
        <div class="uk-card uk-card-default">
          <div class="uk-card-body uk-padding-remove">
            <div class="uk-overflow-auto">
              <table class="uk-table uk-table-hover uk-table-divider">
                <thead>
                  <tr>
                    <th class="uk-table-shrink">
                      <input class="uk-checkbox" type="checkbox" id="select-all">
                    </th>
                    <th>名称</th>
                    <th>分类</th>
                    <th>状态</th>
                    <th>成功率</th>
                    <th>最后抓取</th>
                    <th>操作</th>
                  </tr>
                </thead>
                <tbody>
                  {sources.map((source: any) => {
                    const successRate = source.fetch_count > 0 
                      ? Math.round((source.success_count / source.fetch_count) * 100) 
                      : 0;
                    
                    const lastFetchTime = source.last_fetch_at 
                      ? new Date(source.last_fetch_at).toLocaleString('zh-CN')
                      : '从未';
                    
                    return (
                      <tr>
                        <td>
                          <input class="uk-checkbox source-checkbox" type="checkbox" 
                                 value={source.id}>
                        </td>
                        
                        <td>
                          <div>
                            <div class="uk-text-bold">{source.name}</div>
                            <div class="uk-text-small uk-text-muted uk-text-truncate" 
                                 style="max-width: 200px;" uk-tooltip={source.url}>
                              {source.url}
                            </div>
                          </div>
                        </td>
                        
                        <td>
                          <span class="uk-badge uk-badge-secondary">
                            {source.vertical_name || '未分类'}
                          </span>
                          <div class="uk-text-small uk-text-muted">
                            {source.topic_for_ai}
                          </div>
                        </td>
                        
                        <td>
                          {source.is_active ? (
                            source.error_count > 0 ? (
                              <span class="uk-text-warning">
                                <span uk-icon="warning" class="uk-margin-small-right"></span>
                                异常 ({source.error_count})
                              </span>
                            ) : (
                              <span class="uk-text-success">
                                <span uk-icon="check" class="uk-margin-small-right"></span>
                                活跃
                              </span>
                            )
                          ) : (
                            <span class="uk-text-muted">
                              <span uk-icon="ban" class="uk-margin-small-right"></span>
                              禁用
                            </span>
                          )}
                        </td>
                        
                        <td>
                          <div class="uk-text-bold uk-text-{successRate >= 80 ? 'success' : successRate >= 60 ? 'warning' : 'danger'}">
                            {successRate}%
                          </div>
                          <div class="uk-text-small uk-text-muted">
                            {source.success_count}/{source.fetch_count}
                          </div>
                        </td>
                        
                        <td>
                          <div class="uk-text-small">{lastFetchTime}</div>
                          {source.last_error && (
                            <div class="uk-text-small uk-text-danger uk-text-truncate" 
                                 style="max-width: 150px;" 
                                 uk-tooltip={source.last_error}>
                              {source.last_error}
                            </div>
                          )}
                        </td>
                        
                        <td>
                          <div class="uk-button-group uk-button-group-small">
                            <button class="uk-button uk-button-default uk-button-small test-source-btn" 
                                    data-source-id={source.id} uk-tooltip="测试连接">
                              <span uk-icon="refresh"></span>
                            </button>
                            
                            <button class="uk-button uk-button-default uk-button-small edit-source-btn" 
                                    data-source-id={source.id} uk-tooltip="编辑">
                              <span uk-icon="pencil"></span>
                            </button>
                            
                            <button class="uk-button uk-button-{source.is_active ? 'danger' : 'success'} uk-button-small toggle-source-btn" 
                                    data-source-id={source.id} 
                                    data-current-status={source.is_active}
                                    uk-tooltip={source.is_active ? '禁用' : '启用'}>
                              <span uk-icon={source.is_active ? 'ban' : 'check'}></span>
                            </button>
                            
                            <button class="uk-button uk-button-danger uk-button-small delete-source-btn" 
                                    data-source-id={source.id} uk-tooltip="删除">
                              <span uk-icon="trash"></span>
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : (
        <div class="uk-text-center uk-padding-large">
          <span uk-icon="icon: rss; ratio: 3" class="uk-text-muted"></span>
          <h3 class="uk-text-muted uk-margin-top">暂无RSS源</h3>
          <p class="uk-text-muted">
            {status || search 
              ? '当前筛选条件下没有找到RSS源，请尝试调整筛选条件。' 
              : '还没有配置RSS源，请添加一些情报来源。'}
          </p>
          {(status || search) ? (
            <a href="/sources" class="uk-button uk-button-primary uk-margin-top">
              <span uk-icon="refresh"></span> 查看全部RSS源
            </a>
          ) : (
            <button class="uk-button uk-button-primary uk-margin-top" 
                    onclick="UIkit.modal('#add-source-modal').show()">
              <span uk-icon="plus"></span> 添加第一个RSS源
            </button>
          )}
        </div>
      )}

      <!-- 分页 -->
      {totalPages > 1 && (
        <div class="uk-flex uk-flex-center uk-margin-large-top">
          <ul class="uk-pagination uk-flex-center" uk-margin>
            {page > 1 && (
              <>
                <li><a href={generatePageUrl(1)} uk-tooltip="首页"><span uk-icon="chevron-double-left"></span></a></li>
                <li><a href={generatePageUrl(page - 1)} uk-tooltip="上一页"><span uk-icon="chevron-left"></span></a></li>
              </>
            )}
            
            {Array.from({length: Math.min(5, totalPages)}, (_, i) => {
              const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i;
              return (
                <li class={pageNum === page ? 'uk-active' : ''}>
                  <a href={generatePageUrl(pageNum)}>{pageNum}</a>
                </li>
              );
            })}
            
            {page < totalPages && (
              <>
                <li><a href={generatePageUrl(page + 1)} uk-tooltip="下一页"><span uk-icon="chevron-right"></span></a></li>
                <li><a href={generatePageUrl(totalPages)} uk-tooltip="末页"><span uk-icon="chevron-double-right"></span></a></li>
              </>
            )}
          </ul>
        </div>
      )}
    </div>
  </div>

  <!-- 添加RSS源模态框 -->
  <div id="add-source-modal" class="uk-modal-container" uk-modal>
    <div class="uk-modal-dialog">
      <div class="uk-modal-header">
        <h2 class="uk-modal-title">添加RSS源</h2>
        <button class="uk-modal-close-default" type="button" uk-close></button>
      </div>
      
      <div class="uk-modal-body">
        <form id="add-source-form" class="uk-form-stacked">
          <div class="uk-margin">
            <label class="uk-form-label" for="source-name">源名称 *</label>
            <input class="uk-input" id="source-name" type="text" 
                   placeholder="例如：TechCrunch 制造业" required>
          </div>
          
          <div class="uk-margin">
            <label class="uk-form-label" for="source-url">RSS URL *</label>
            <input class="uk-input" id="source-url" type="url" 
                   placeholder="https://example.com/rss" required>
          </div>
          
          <div class="uk-margin">
            <label class="uk-form-label" for="vertical-name">垂直分类</label>
            <select class="uk-select" id="vertical-name">
              <option value="3D Print">3D打印</option>
              <option value="Smart Manufacturing">智能制造</option>
              <option value="Industrial IoT">工业物联网</option>
              <option value="Robotics">机器人技术</option>
              <option value="Supply Chain">供应链管理</option>
              <option value="Green Technology">绿色技术</option>
              <option value="Other">其他</option>
            </select>
          </div>
          
          <div class="uk-margin">
            <label class="uk-form-label" for="topic-for-ai">AI分析主题</label>
            <input class="uk-input" id="topic-for-ai" type="text" 
                   placeholder="智能制造" 
                   value="智能制造">
            <div class="uk-text-small uk-text-muted uk-margin-small-top">
              用于AI分析时的领域上下文
            </div>
          </div>
          
          <div class="uk-margin">
            <label class="uk-form-label">
              <input class="uk-checkbox" type="checkbox" id="is-active" checked>
              启用此RSS源
            </label>
          </div>
        </form>
      </div>
      
      <div class="uk-modal-footer uk-text-right">
        <button class="uk-button uk-button-default uk-modal-close" type="button">取消</button>
        <button class="uk-button uk-button-primary" type="button" id="save-source-btn">保存</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 全选功能
    const selectAllCheckbox = document.getElementById('select-all') as HTMLInputElement;
    const sourceCheckboxes = document.querySelectorAll('.source-checkbox') as NodeListOf<HTMLInputElement>;
    
    selectAllCheckbox?.addEventListener('change', function() {
      sourceCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
    });
    
    // 保存RSS源
    document.getElementById('save-source-btn')?.addEventListener('click', async function() {
      const form = document.getElementById('add-source-form') as HTMLFormElement;
      
      const data = {
        name: (document.getElementById('source-name') as HTMLInputElement).value,
        url: (document.getElementById('source-url') as HTMLInputElement).value,
        vertical_name: (document.getElementById('vertical-name') as HTMLSelectElement).value,
        topic_for_ai: (document.getElementById('topic-for-ai') as HTMLInputElement).value,
        is_active: (document.getElementById('is-active') as HTMLInputElement).checked
      };
      
      // 基本验证
      if (!data.name.trim() || !data.url.trim()) {
        UIkit.notification({
          message: '请填写RSS源名称和URL',
          status: 'danger'
        });
        return;
      }
      
      try {
        const response = await fetch('/api/rss-sources', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          UIkit.notification({
            message: result.message || 'RSS源添加成功！',
            status: 'success'
          });
          UIkit.modal('#add-source-modal').hide();
          window.location.reload();
        } else {
          UIkit.notification({
            message: result.error || '保存失败，请重试',
            status: 'danger'
          });
        }
      } catch (error) {
        console.error('保存失败:', error);
        UIkit.notification({
          message: '网络错误，请重试',
          status: 'danger'
        });
      }
    });
    
    // 测试RSS源连接
    document.querySelectorAll('.test-source-btn').forEach(btn => {
      btn.addEventListener('click', async function() {
        const sourceId = (this as HTMLElement).dataset.sourceId;
        const button = this as HTMLButtonElement;
        
        // 显示加载状态
        const originalIcon = button.innerHTML;
        button.innerHTML = '<div uk-spinner="ratio: 0.6"></div>';
        button.disabled = true;
        
        try {
          const response = await fetch(`/api/rss-sources?action=test&sourceId=${sourceId}`);
          const result = await response.json();
          
          if (result.success) {
            UIkit.notification({
              message: result.message,
              status: 'success'
            });
          } else {
            UIkit.notification({
              message: result.message || 'RSS源连接测试失败',
              status: 'warning'
            });
          }
        } catch (error) {
          console.error('测试RSS源失败:', error);
          UIkit.notification({
            message: '网络错误，无法测试连接',
            status: 'danger'
          });
        } finally {
          // 恢复按钮状态
          button.innerHTML = originalIcon;
          button.disabled = false;
        }
      });
    });
    
    // 切换RSS源状态
    document.querySelectorAll('.toggle-source-btn').forEach(btn => {
      btn.addEventListener('click', async function() {
        const sourceId = (this as HTMLElement).dataset.sourceId;
        const currentStatus = (this as HTMLElement).dataset.currentStatus === 'true';
        const button = this as HTMLButtonElement;
        
        const originalContent = button.innerHTML;
        button.innerHTML = '<div uk-spinner="ratio: 0.6"></div>';
        button.disabled = true;
        
        try {
          const response = await fetch('/api/rss-sources', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: sourceId,
              action: 'toggle',
              currentStatus: currentStatus
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            UIkit.notification({
              message: result.message,
              status: 'success'
            });
            // 刷新页面以更新状态显示
            window.location.reload();
          } else {
            UIkit.notification({
              message: result.error || '状态切换失败',
              status: 'danger'
            });
          }
        } catch (error) {
          console.error('切换RSS源状态失败:', error);
          UIkit.notification({
            message: '网络错误，无法切换状态',
            status: 'danger'
          });
        } finally {
          button.innerHTML = originalContent;
          button.disabled = false;
        }
      });
    });
    
    // 删除RSS源
    document.querySelectorAll('.delete-source-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const sourceId = (this as HTMLElement).dataset.sourceId;
        UIkit.modal.confirm('确定要删除这个RSS源吗？此操作不可撤销。').then(async function() {
          try {
            const response = await fetch(`/api/rss-sources?id=${sourceId}`, {
              method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (result.success) {
              UIkit.notification({
                message: result.message,
                status: 'success'
              });
              window.location.reload();
            } else {
              UIkit.notification({
                message: result.error || '删除失败',
                status: 'danger'
              });
            }
          } catch (error) {
            console.error('删除RSS源失败:', error);
            UIkit.notification({
              message: '网络错误，删除失败',
              status: 'danger'
            });
          }
        });
      });
    });
    
    // 批量操作
    document.getElementById('bulk-enable-btn')?.addEventListener('click', async function() {
      const checkedBoxes = document.querySelectorAll('.source-checkbox:checked') as NodeListOf<HTMLInputElement>;
      const sourceIds = Array.from(checkedBoxes).map(box => box.value);
      
      if (sourceIds.length === 0) {
        UIkit.notification({
          message: '请先选择要操作的RSS源',
          status: 'warning'
        });
        return;
      }
      
      await performBatchOperation(sourceIds, true, '启用');
    });
    
    document.getElementById('bulk-disable-btn')?.addEventListener('click', async function() {
      const checkedBoxes = document.querySelectorAll('.source-checkbox:checked') as NodeListOf<HTMLInputElement>;
      const sourceIds = Array.from(checkedBoxes).map(box => box.value);
      
      if (sourceIds.length === 0) {
        UIkit.notification({
          message: '请先选择要操作的RSS源',
          status: 'warning'
        });
        return;
      }
      
      await performBatchOperation(sourceIds, false, '禁用');
    });
    
    // 批量操作执行函数
    async function performBatchOperation(sourceIds: string[], isActive: boolean, actionName: string) {
      const promises = sourceIds.map(sourceId => 
        fetch('/api/rss-sources', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: sourceId,
            is_active: isActive
          })
        }).then(res => res.json())
      );
      
      try {
        const results = await Promise.all(promises);
        const successCount = results.filter(r => r.success).length;
        const failCount = results.length - successCount;
        
        if (failCount === 0) {
          UIkit.notification({
            message: `成功${actionName}了 ${successCount} 个RSS源`,
            status: 'success'
          });
        } else {
          UIkit.notification({
            message: `${actionName}了 ${successCount} 个RSS源，${failCount} 个失败`,
            status: 'warning'
          });
        }
        
        window.location.reload();
      } catch (error) {
        console.error('批量操作失败:', error);
        UIkit.notification({
          message: `批量${actionName}失败`,
          status: 'danger'
        });
      }
    }
    
    // 测试全部RSS源
    document.getElementById('test-all-btn')?.addEventListener('click', async function() {
      const button = this as HTMLButtonElement;
      const originalContent = button.innerHTML;
      
      button.innerHTML = '<div uk-spinner="ratio: 0.6"></div> 测试中...';
      button.disabled = true;
      
      // 获取所有RSS源ID
      const allSourceButtons = document.querySelectorAll('.test-source-btn');
      const sourceIds = Array.from(allSourceButtons).map(btn => 
        (btn as HTMLElement).dataset.sourceId
      );
      
      if (sourceIds.length === 0) {
        UIkit.notification({
          message: '没有找到RSS源',
          status: 'warning'
        });
        button.innerHTML = originalContent;
        button.disabled = false;
        return;
      }
      
      // 批量测试所有RSS源
      const promises = sourceIds.map(sourceId => 
        fetch(`/api/rss-sources?action=test&sourceId=${sourceId}`)
          .then(res => res.json())
          .catch(err => ({ success: false, message: '测试失败' }))
      );
      
      try {
        const results = await Promise.all(promises);
        const successCount = results.filter(r => r.success).length;
        const failCount = results.length - successCount;
        
        UIkit.notification({
          message: `测试完成: ${successCount} 个正常, ${failCount} 个异常`,
          status: failCount === 0 ? 'success' : 'warning'
        });
      } catch (error) {
        console.error('批量测试失败:', error);
        UIkit.notification({
          message: '批量测试失败',
          status: 'danger'
        });
      } finally {
        button.innerHTML = originalContent;
        button.disabled = false;
      }
    });
  });
</script>
</Layout>