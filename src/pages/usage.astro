---
import DashboardLayout from '../layouts/DashboardLayout.astro';

// 读取Markdown文件内容
import fs from 'fs';
import path from 'path';

const usageFilePath = path.join(process.cwd(), 'src/content/usage.md');
let markdownContent = '';

try {
  markdownContent = fs.readFileSync(usageFilePath, 'utf-8');
} catch (error) {
  console.error('Failed to read usage.md:', error);
  markdownContent = '# KUATO 使用指南\n\n内容加载中...';
}
---

<DashboardLayout title="用KUATO - KUATO">
  <!-- Page Header -->
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">用KUATO</h1>
        <p class="mt-1 text-sm text-gray-500">
          编辑和管理系统使用说明文档
        </p>
      </div>
      <div class="flex items-center space-x-3">
        <button
          id="edit-btn"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
          编辑
        </button>
        <button
          id="save-btn"
          class="hidden inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          保存
        </button>
        <button
          id="cancel-btn"
          class="hidden inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          取消
        </button>
      </div>
    </div>
  </div>

  <!-- Content Area -->
  <div class="dashboard-card">
    <div class="dashboard-card-body">
      <!-- Preview Mode -->
      <div id="preview-mode" class="prose max-w-none">
        <div id="markdown-preview"></div>
      </div>

      <!-- Edit Mode -->
      <div id="edit-mode" class="hidden">
        <textarea
          id="markdown-editor"
          class="w-full h-96 p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
          placeholder="在此编写Markdown内容..."
        >{markdownContent}</textarea>
        
        <!-- Markdown Help -->
        <div class="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 class="text-sm font-medium text-gray-900 mb-2">Markdown 语法提示：</h4>
          <div class="grid grid-cols-2 gap-4 text-xs text-gray-600">
            <div>
              <div><code># 标题1</code></div>
              <div><code>## 标题2</code></div>
              <div><code>**粗体**</code></div>
              <div><code>*斜体*</code></div>
            </div>
            <div>
              <div><code>- 列表项</code></div>
              <div><code>[链接](URL)</code></div>
              <div><code>`代码`</code></div>
              <div><code>> 引用</code></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Status Message -->
  <div id="status-message" class="fixed top-4 right-4 z-50 hidden"></div>
</DashboardLayout>

<script>
  // 导入marked库用于Markdown渲染
  import { marked } from 'https://cdn.jsdelivr.net/npm/marked@11.1.1/+esm';

  // DOM元素
  const editBtn = document.getElementById('edit-btn');
  const saveBtn = document.getElementById('save-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const previewMode = document.getElementById('preview-mode');
  const editMode = document.getElementById('edit-mode');
  const markdownEditor = document.getElementById('markdown-editor');
  const markdownPreview = document.getElementById('markdown-preview');
  const statusMessage = document.getElementById('status-message');

  // 初始化页面
  let originalContent = markdownEditor.value;
  let isEditing = false;

  // 渲染Markdown预览
  function renderPreview(content) {
    markdownPreview.innerHTML = marked.parse(content || '');
  }

  // 显示状态消息
  function showStatus(message, type = 'success') {
    statusMessage.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg ${
      type === 'success' ? 'bg-green-100 border border-green-400 text-green-700' : 
      type === 'error' ? 'bg-red-100 border border-red-400 text-red-700' : 
      'bg-blue-100 border border-blue-400 text-blue-700'
    }`;
    statusMessage.textContent = message;
    statusMessage.classList.remove('hidden');
    
    setTimeout(() => {
      statusMessage.classList.add('hidden');
    }, 3000);
  }

  // 进入编辑模式
  function enterEditMode() {
    isEditing = true;
    originalContent = markdownEditor.value;
    
    previewMode.classList.add('hidden');
    editMode.classList.remove('hidden');
    editBtn.classList.add('hidden');
    saveBtn.classList.remove('hidden');
    cancelBtn.classList.remove('hidden');
    
    markdownEditor.focus();
  }

  // 退出编辑模式
  function exitEditMode(save = false) {
    if (save) {
      renderPreview(markdownEditor.value);
    } else {
      markdownEditor.value = originalContent;
    }
    
    isEditing = false;
    editMode.classList.add('hidden');
    previewMode.classList.remove('hidden');
    saveBtn.classList.add('hidden');
    cancelBtn.classList.add('hidden');
    editBtn.classList.remove('hidden');
  }

  // 保存内容到服务器
  async function saveContent() {
    const content = markdownEditor.value;
    
    try {
      const response = await fetch('/api/usage/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content })
      });
      
      if (response.ok) {
        showStatus('✅ 保存成功！', 'success');
        exitEditMode(true);
      } else {
        const error = await response.text();
        showStatus('❌ 保存失败：' + error, 'error');
      }
    } catch (error) {
      console.error('Save error:', error);
      showStatus('❌ 保存失败：' + error.message, 'error');
    }
  }

  // 事件监听器
  editBtn.addEventListener('click', enterEditMode);
  saveBtn.addEventListener('click', saveContent);
  cancelBtn.addEventListener('click', () => exitEditMode(false));

  // 键盘快捷键
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      if (e.key === 'e' && !isEditing) {
        e.preventDefault();
        enterEditMode();
      } else if (e.key === 's' && isEditing) {
        e.preventDefault();
        saveContent();
      } else if (e.key === 'Escape' && isEditing) {
        e.preventDefault();
        exitEditMode(false);
      }
    }
  });

  // 实时预览（在编辑模式下）
  markdownEditor.addEventListener('input', () => {
    // 可以在这里添加实时预览功能
  });

  // 页面加载时渲染初始内容
  document.addEventListener('DOMContentLoaded', () => {
    renderPreview(originalContent);
  });

  // 页面离开前确认
  window.addEventListener('beforeunload', (e) => {
    if (isEditing && markdownEditor.value !== originalContent) {
      e.preventDefault();
      e.returnValue = '您有未保存的更改，确定要离开吗？';
      return '您有未保存的更改，确定要离开吗？';
    }
  });
</script>

<style>
  /* Markdown预览样式 */
  .prose {
    max-width: none;
  }

  .prose h1 {
    @apply text-2xl font-bold text-gray-900 mt-8 mb-4 border-b border-gray-200 pb-2;
  }

  .prose h2 {
    @apply text-xl font-semibold text-gray-800 mt-6 mb-3;
  }

  .prose h3 {
    @apply text-lg font-medium text-gray-700 mt-5 mb-2;
  }

  .prose p {
    @apply text-gray-600 leading-relaxed mb-4;
  }

  .prose ul, .prose ol {
    @apply ml-6 mb-4;
  }

  .prose li {
    @apply text-gray-600 mb-1;
  }

  .prose ul li {
    @apply list-disc;
  }

  .prose ol li {
    @apply list-decimal;
  }

  .prose blockquote {
    @apply border-l-4 border-blue-200 bg-blue-50 pl-4 py-2 mb-4 italic text-blue-800;
  }

  .prose code {
    @apply bg-gray-100 text-red-600 px-1 py-0.5 rounded text-sm font-mono;
  }

  .prose pre {
    @apply bg-gray-100 p-4 rounded-lg overflow-x-auto mb-4;
  }

  .prose pre code {
    @apply bg-transparent text-gray-800 p-0;
  }

  .prose a {
    @apply text-blue-600 hover:text-blue-800 underline;
  }

  .prose table {
    @apply w-full border-collapse border border-gray-300 mb-4;
  }

  .prose th, .prose td {
    @apply border border-gray-300 px-3 py-2 text-left;
  }

  .prose th {
    @apply bg-gray-50 font-medium;
  }

  /* 编辑器样式 */
  #markdown-editor {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    line-height: 1.5;
  }

  #markdown-editor:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
</style>
</DashboardLayout>