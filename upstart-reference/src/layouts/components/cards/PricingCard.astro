---
import type { ComparisonCategory, PricingPlans, PricingTier } from "@/types";
import ButtonLink from "../buttons/ButtonLink.astro";
import OptimizedImage from "../utilities/OptimizedImage.astro";
import { markdownify } from "@/lib/utils/textConverter";
import AnimatedNumber from "@/components/widgets/AnimatedNumber.astro";

type Props = {
  content: PricingTier & {
    plans: PricingPlans;
    comparison: ComparisonCategory[];
  };
  index: number;
  class?: string;
};

const {
  class: className,
  index,
  content: {
    enable,
    featured,
    comparison,
    usages,
    name,
    plans,
    description,
    price,
    features,
    cta_btn,
  },
  ...rest
} = Astro.props;

const selectedPlan = plans.list?.find(
  (plan: { selected: boolean }) => plan.selected,
);

const allFeatures = comparison?.map((item) => item.list).flat();

const currentPlanFeatures = allFeatures
  ?.map((item) => {
    if (item.included[index]) return item;
  })
  .filter(Boolean);
---

{
  enable && (
    <div
      class:list={[
        "max-lg:box-shadow-primary hover:lg:box-shadow-primary flex min-h-full flex-col justify-between gap-8 rounded-3xl border px-9 py-11 text-white transition duration-500",
        className,
        { "bg-primary/15 border-primary": featured },
        { "bg-primary/[2.5%]": !featured },
      ]}
      {...rest}>
      <div class="space-y-5">
        {name && (
          <h3 class="text-h4 text-inherit" set:html={markdownify(name)} />
        )}

        <div class="space-y-5">
          {description && (
            <p class="text-text-default" set:html={markdownify(description)} />
          )}

          {price?.map((item, usageIndex) => (
            <div
              data-plan={item.type.toLowerCase()}
              class:list={[
                "price-wrapper relative flex flex-wrap items-end gap-1.5 transition-all duration-300",
                {
                  active: selectedPlan?.label === item.type,
                },
                {
                  hidden: selectedPlan?.label !== item.type && plans.enable,
                },
                {
                  hidden: !plans.enable && usageIndex !== 0,
                },
              ]}>
              <span class="text-h3/none font-secondary flex gap-0">
                <AnimatedNumber
                  animate_on="click"
                  transition_time="1.2s"
                  content={item}
                />
              </span>
              {plans.enable && (
                <span
                  class="pricing-type pb-2 text-sm leading-none uppercase"
                  set:html={"/ " + item.type}
                />
              )}
              {featured && (
                <OptimizedImage
                  class="absolute -top-10 right-0 overflow-hidden opacity-20"
                  width={180}
                  src="/images/pricing-card-highlighter.png"
                  alt="shape"
                />
              )}
            </div>
          ))}

          {cta_btn?.enable && (
            // CTA button
            <ButtonLink
              class="btn-md btn-primary btn-has-icon group relative z-30 flex items-center justify-between gap-4"
              content={cta_btn}>
              <span class="flex h-6 w-12 items-center justify-center rounded-full bg-white/15">
                <OptimizedImage
                  alt="icon"
                  class="h-5 w-5 transition-all duration-300 group-hover:rotate-180"
                  src="/images/icons/svg/star.svg"
                />
              </span>
            </ButtonLink>
          )}
          {usages?.map((item, i) => (
            <div
              data-plan={item.type.toLowerCase()}
              class:list={[
                "rounded-lg px-5 py-2.5 text-sm transition-all duration-300",
                {
                  hidden: selectedPlan?.label !== item.type && plans.enable,
                },
                {
                  hidden: !plans.enable && i !== 0,
                },
                {
                  "bg-primary/15": featured,
                },
                {
                  "bg-primary/5": !featured,
                },
              ]}>
              {item.list.map((item: { label: string; value: string }) => (
                <div class="flex flex-wrap-reverse items-center justify-between gap-5 border-b py-2 first:pt-0 last:border-b-transparent last:pb-0">
                  <span set:html={item.value} />
                  <span set:html={item.label} />
                </div>
              ))}
            </div>
          ))}
        </div>

        <div class="prose-styles has-list has-list-check prose-strong:whitespace-nowrap prose-strong:text-white prose-strong:bg-white/5 prose-strong:px-2.5 prose-strong:py-1 prose-strong:font-medium prose-strong:text-xs prose-strong:ml-2 prose-strong:rounded-full">
          <ul class="list-check list-unstyled space-y-3 py-4 text-sm">
            {features.map((feature) => (
              <li set:html={markdownify(feature)} />
            ))}
            {currentPlanFeatures?.map(
              (item) =>
                item?.included[index] && (
                  <li class="block lg:hidden">
                    {markdownify(item.value)}
                    {typeof item.included[index] === "string" && (
                      <strong set:html={markdownify(item.included[index])} />
                    )}
                  </li>
                ),
            )}
          </ul>
        </div>
      </div>
    </div>
  )
}
