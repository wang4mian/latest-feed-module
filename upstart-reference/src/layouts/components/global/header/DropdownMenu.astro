---
import type { NavigationLink } from "@/types";
import NavMegaMenu from "@/layouts/components/global/header/MegaMenu.astro";
import ReactIcons from "@/helpers/ReactIcons.astro";
import { getLocaleUrlCTM } from "@/lib/utils/languageParser.ts";

const { recursive } = Astro.props;
const menu = Astro.props.menu as NavigationLink;
const { pathname } = Astro.url;
---

<li
  class:list={[
    "hs-dropdown nav-dropdown group [--auto-close:inside]",
    recursive ? "nav-dropdown-item [--placement:right-start]" : "nav-item",
    menu.hasMegaMenu || menu.hasChildren ? "relative" : "",
    menu.hasMegaMenu
      ? "lg:[--strategy:fixed]"
      : menu.hasChildren
        ? "lg:[--strategy:absolute]"
        : "",
  ]}
  role="menuitem">
  <span
    class:list={[
      "nav-dropdown-toggle hs-dropdown-toggle flex items-center",
      {
        active:
          menu.children?.map(({ url }) => url).includes(pathname) ||
          menu.children?.map(({ url }) => `${url}/`).includes(pathname),
      },
      recursive
        ? "nav-dropdown-link justify-between"
        : "nav-link max-lg:hs-dropdown-open:bg-white/5 max-lg:!flex max-lg:justify-between",
    ]}>
    {menu.name}
    <ReactIcons
      class="hs-dropdown-open:rotate-180 ml-2 h-4 w-4 transition duration-300"
      icon="IoIosArrowDown"
    />
  </span>
  {
    !menu.hasMegaMenu && menu.hasChildren && (
      <ul
        class="nav-dropdown-list hs-dropdown-menu hs-dropdown-open:pointer-events-auto hs-dropdown-open:opacity-100 hs-dropdown-open:!mt-2 pointer-events-none absolute top-0 mt-6 hidden opacity-0 transition-[opacity,margin] max-lg:!m-0 max-lg:!transform-none"
        {...(recursive ? { "aria-orientation": "vertical" } : {})}>
        {menu.children?.map((child) =>
          child.hasChildren ? (
            child.hasChildren && <Astro.self recursive menu={child} />
          ) : (
            <li class="nav-dropdown-item" role="menuitem">
              <a
                href={getLocaleUrlCTM(
                  child.url || Astro.url.origin,
                  Astro.currentLocale,
                )}
                {...{
                  // Set `rel` attribute for external links or use provided value
                  rel: child.url?.startsWith("http")
                    ? child.rel || "noopener noreferrer"
                    : child.rel || undefined,

                  // Set `target` to "_blank" for external links unless otherwise specified
                  target: child.url?.startsWith("http")
                    ? child.target || "_blank"
                    : child.target || undefined,
                }}
                class:list={[
                  "nav-dropdown-link block",
                  {
                    active:
                      pathname === `${child.url}/` || pathname === child.url,
                  },
                ]}>
                {child.name}
              </a>
            </li>
          ),
        )}
      </ul>
    )
  }
  {!menu.hasChildren && menu.hasMegaMenu && <NavMegaMenu menu={menu} />}
</li>
