---
import OptimizedImage from "@/components/utilities/OptimizedImage.astro";
import type { NavigationLink } from "@/types";
import { getLocaleUrlCTM } from "@/lib/utils/languageParser.ts";
import ButtonLink from "@/components/buttons/ButtonLink.astro";

const menu = Astro.props.menu as NavigationLink;
const enabledMenus = menu.menus?.filter((menu) => menu.enable) || [];

const IsMultiColMenu = enabledMenus.length >= 2;
---

<div
  class:list={[
    "hs-dropdown-menu mega-menu hs-dropdown-open:pointer-events-auto hs-dropdown-open:opacity-100 bg-theme-dark hs-dropdown-open:!mt-2 has-customized-scrollbar pointer-events-none top-0 mt-4 hidden max-h-[90vh] overflow-auto overflow-x-hidden rounded-xl border opacity-0 transition-[opacity,margin] max-lg:!static max-lg:!transform-none lg:fixed lg:top-full",
    {
      "translate-x-centered lg:!fixed lg:!left-1/2 lg:w-full lg:max-w-screen-lg":
        IsMultiColMenu,
    },
  ]}>
  <div class="md:flex">
    {
      menu.menus && enabledMenus.length > 0 && (
        <div
          class:list={[
            "p-2.5 md:p-5 lg:flex lg:flex-row lg:flex-wrap lg:justify-between",
          ]}>
          {menu.menus
            .filter((menu) => menu.enable)
            .map((menu) => (
              <ul
                class:list={[
                  "tracking-wider text-white [&>li:not(:first-child)>a]:py-3",
                  {
                    "lg:w-1/2": IsMultiColMenu,
                    "w-full lg:max-w-[320px]": !IsMultiColMenu,
                  },
                ]}>
                {menu.children?.map((child) => (
                  <li role="menuitem">
                    <a
                      {...{
                        // Set `rel` attribute for external links or use provided value
                        rel: child.url?.startsWith("http")
                          ? child.rel || "noopener noreferrer"
                          : child.rel || undefined,

                        // Set `target` to "_blank" for external links unless otherwise specified
                        target: child.url?.startsWith("http")
                          ? child.target || "_blank"
                          : child.target || undefined,
                      }}
                      target={
                        child.url?.startsWith("http") ? "_blank" : undefined
                      }
                      href={getLocaleUrlCTM(
                        child.url || Astro.url.origin,
                        Astro.currentLocale,
                      )}
                      class="flex gap-4 rounded-lg p-4 text-inherit hover:bg-white/5">
                      {child.icon && (
                        <span class="-mt-[2px] inline-block min-w-4">
                          <OptimizedImage
                            inlineSvg={true}
                            src={child.icon}
                            class="inline-block h-4 w-4 text-white brightness-0 invert"
                            alt="icon"
                          />
                        </span>
                      )}
                      <div class="space-y-1">
                        {child.name && (
                          <div
                            class="font-secondary text-lg text-white"
                            set:html={child.name}
                          />
                        )}
                        {child.description && (
                          <p
                            class="text-sm/relaxed opacity-60"
                            set:html={child.description}
                          />
                        )}
                      </div>
                    </a>
                  </li>
                ))}
              </ul>
            ))}
        </div>
      )
    }

    {
      menu.cta && menu.cta.enable && (
        <div
          class:list={[
            "bg-secondary/10 space-y-5 p-5 lg:w-full lg:max-w-[320px]",
            {
              "w-full": IsMultiColMenu,
            },
          ]}>
          {menu.cta.image && (
            <OptimizedImage
              width={300}
              src={menu.cta.image}
              class="h-52 w-full rounded-xl object-cover object-top"
            />
          )}
          <div class="space-y-1.5">
            {menu.cta.title && (
              <div
                class="font-secondary text-lg text-white"
                set:html={menu.cta.title}
              />
            )}
            {menu.cta.description && (
              <p
                class="text-sm/relaxed opacity-80"
                set:html={menu.cta.description}
              />
            )}
          </div>
          {menu.cta.cta_btn?.enable && (
            <ButtonLink
              content={menu.cta.cta_btn}
              class="btn-primary has-text-flip-animation !rounded-md"
            />
          )}
        </div>
      )
    }
  </div>
</div>
