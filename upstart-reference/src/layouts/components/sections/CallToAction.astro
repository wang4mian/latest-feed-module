---
import type { Section } from "@/types";
import { getEntryCTM } from "@/lib/contentParser.astro";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import OptimizedImage from "@/components/utilities/OptimizedImage.astro";
import { markdownify } from "@/lib/utils/textConverter";
import ButtonLink from "@/layouts/components/buttons/ButtonLink.astro";

// Type for this section data
type cta_section_type = Section & {
  rating_content: string;
  features: string[];
};

type Props = {
  content?: cta_section_type;
};

// Fetching the default content for the this section
let default_content = (
  await getEntryCTM("sections", "call-to-action", Astro.currentLocale)
)?.data as cta_section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as cta_section_type;

// Extracting required values from 'content' object
let {
  enable = true,
  title,
  features,
  rating_content,
  cta_btn,
} = actual_content as cta_section_type;
---

{
  enable && (
    <section class="cta-section mt-auto">
      <div class="bg-accent py-14 md:py-28">
        <div class="container grid grid-cols-1 place-content-between gap-y-16 lg:grid-cols-2 lg:gap-x-10">
          <div
            class="space-y-7 lg:max-w-2xl"
            data-aos="fade-up-sm"
            data-aos-offset="0">
            {title && (
              <h2
                class="has-italic-text capitalize"
                set:html={markdownify(title)}
              />
            )}

            {features && (
              <div class="flex flex-wrap gap-4">
                {features.map((feature) => (
                  <div
                    class:list={[
                      "from-primary/20 to-primary/5 inline-flex items-center gap-4 rounded-full bg-gradient-to-r to-90% py-1 pe-5 pl-2 text-white",
                    ]}>
                    <OptimizedImage
                      inlineSvg={true}
                      class="text-primary"
                      src="/images/icons/svg/check-rounded.svg"
                      alt="icon"
                    />
                    {markdownify(feature)}
                  </div>
                ))}
              </div>
            )}
          </div>
          <div class="flex flex-wrap-reverse items-center gap-x-20 gap-y-6 md:flex-nowrap lg:justify-end">
            {cta_btn && cta_btn.enable && (
              <div
                class="after:sm:bg-primary/35 relative after:sm:absolute after:sm:top-0 after:sm:left-[120%] after:sm:h-full after:sm:w-px after:sm:rotate-[18deg] after:sm:content-['']"
                data-aos="fade-right-sm">
                <ButtonLink
                  class="btn-md btn-primary btn-has-icon group relative z-30 flex items-center gap-4"
                  content={cta_btn}>
                  <span class="flex h-6 w-12 items-center justify-center rounded-full bg-white/15">
                    <OptimizedImage
                      alt="icon"
                      class="h-5 w-5 transition-all duration-300 group-hover:rotate-180"
                      src="/images/icons/svg/star.svg"
                    />
                  </span>
                </ButtonLink>
              </div>
            )}

            {rating_content && (
              <div
                class="flex items-center gap-5 text-sm/relaxed"
                data-aos="fade-right-sm"
                data-aos-delay="100">
                <svg
                  class="text-primary"
                  width="35"
                  height="34"
                  viewBox="0 0 35 34"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M7.36763 33.625L10.1437 21.3312L0.833252 13.0625L13.1333 11.9687L17.9166 0.375L22.6999 11.9687L34.9999 13.0625L25.6895 21.3312L28.4655 33.625L17.9166 27.1062L7.36763 33.625Z"
                    fill="url(#paint0_linear_254_3061)"
                  />
                  <defs>
                    <linearGradient
                      id="paint0_linear_254_3061"
                      x1="4.19107"
                      y1="-4.53094"
                      x2="14.7907"
                      y2="41.9626"
                      gradientUnits="userSpaceOnUse">
                      <stop stop-color="currentColor" stop-opacity="0" />
                      <stop offset="1" stop-color="currentColor" />
                    </linearGradient>
                  </defs>
                </svg>
                <div set:html={rating_content} />
              </div>
            )}
          </div>
        </div>
      </div>
    </section>
  )
}
