---
import { getEntryCTM } from "@/lib/contentParser.astro";
import type { ContactFormConfig, Section } from "@/types";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import { markdownify } from "@/lib/utils/textConverter";
import OptimizedImage from "@/components/utilities/OptimizedImage.astro";
import SocialComponent from "@/layouts/components/social/Social.astro";
import SocialData from "@/config/social.json";
import type { InputField } from "@/types";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import Subtitle from "../widgets/Subtitle.astro";
const config = parseTomlToJson("./src/config/config.toml");

const {
  settings: { contact_form_action, contact_form_provider },
} = config;

type ContactItem = {
  icon: string;
  label: string;
  value: string;
};

type ContactList = {
  enable: boolean;
  list: ContactItem[];
};

type SocialItem = {
  enable: boolean;
  label: string;
  icon: string;
  url: string;
};

type SocialConfig = {
  enable: boolean;
  title: string;
  list?: SocialItem[]; // Optional if the list is commented out
};

type pricing_section_type = Section & {
  form: ContactFormConfig;
  contact_list: ContactList;
  social: SocialConfig;
};

type Props = {
  content?: pricing_section_type;
};

// Fetching the default content for the this section
let default_content = (
  await getEntryCTM("sections", "contact-section", Astro.currentLocale)
)?.data as pricing_section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as pricing_section_type;

// Extracting required values from 'content' object
let {
  enable = true,
  title,
  description,
  subtitle,
  social,
  form,
  contact_list,
} = actual_content as pricing_section_type;

// Generate ID from label (Required for Input Radio and Checkbox)
const genIdFromLabel = (label: string) => label.toLowerCase().replace(" ", "-");

// Combine same group radio to show them together without space
const combineRadio = (list: InputField[]) => {
  const groupMap: Record<
    string,
    { index: number; group_label?: string; items: InputField[] }
  > = {};
  const result: any[] = [...list];

  list.forEach((item, index) => {
    if (item.group) {
      // Track the group items, their first position, and group_label
      if (!groupMap[item.group]) {
        groupMap[item.group] = {
          index,
          group_label: item.group_label || "", // Capture group_label from the first occurrence
          items: [],
        };
      }
      groupMap[item.group].items.push(item);
    }
  });

  // Replace first occurrence of group with combined object and remove others
  Object.entries(groupMap).forEach(
    ([groupName, { index, group_label, items }]) => {
      // Replace the first occurrence with the combined group object
      result[index] = { group: groupName, group_label, items };

      // Remove other occurrences from the result array
      for (let i = result.length - 1; i > index; i--) {
        if (result[i].group === groupName) {
          result.splice(i, 1);
        }
      }
    },
  );

  return result;
};

form = {
  ...form,
  inputs: combineRadio(form.inputs),
};
---

{
  enable && (
    <section class="relative">
      <div class:list={["container"]}>
        <div
          class:list={[
            "flex flex-wrap items-start justify-between gap-x-20 gap-y-6 lg:flex-nowrap",
          ]}>
          <div data-aos="fade-up-sm" class="lg:sticky lg:top-32 lg:max-w-lg">
            <Subtitle class="ml-0" content={subtitle} />
            {title && (
              <h2
                class="h2 has-italic-text capitalize"
                set:html={markdownify(title)}
              />
            )}
            {description && (
              <p class="mt-6" set:html={markdownify(description, true)} />
            )}
            {contact_list?.enable && (
              <div class="mt-8 space-y-3">
                {contact_list.list.map((item) => (
                  <div class="flex items-center justify-start gap-x-4 py-1.5">
                    {item.icon && (
                      <div class="group-hover/item:bg-primary bg-primary/15 text-primary flex h-12 w-12 shrink-0 items-center justify-center rounded-lg transition duration-300">
                        <OptimizedImage
                          inlineSvg={true}
                          src={item.icon || ""}
                          class="h-5 w-5 transition"
                        />
                      </div>
                    )}
                    <div class="prose-a:text-text-default space-y-px">
                      {item.label && (
                        <div class="text-sm text-white" set:html={item.label} />
                      )}
                      {item.value && <p set:html={markdownify(item.value)} />}
                    </div>
                  </div>
                ))}
              </div>
            )}
            {social?.enable &&
              SocialData.main.filter((social) => social.enable).length > 0 && (
                <div class="bg-accent box-shadow-primary mt-8 w-fit space-y-4 rounded-lg p-8">
                  {social.title && (
                    <h3
                      class="text-base-sm font-primary font-normal text-inherit md:text-base"
                      set:html={markdownify(social.title)}
                    />
                  )}
                  <SocialComponent
                    size="sm"
                    class="gap-2"
                    layout="modern"
                    list={
                      social.list ||
                      SocialData.main.filter((social) => social.enable)
                    }
                  />
                </div>
              )}
          </div>
          {form && (
            <div
              data-aos="fade-up-sm"
              data-aos-delay="200"
              class="mt-10 w-full lg:mt-0 lg:max-w-2xl lg:p-10">
              <form
                id="contact-form"
                {...{
                  "data-netlify":
                    contact_form_provider === "netlify" ? "true" : undefined,
                  "data-action": contact_form_action,
                  action:
                    contact_form_provider === "netlify"
                      ? contact_form_action
                      : undefined,
                  "data-provider": contact_form_provider,
                }}
                method="post"
                class="grid grid-cols-2 gap-4">
                {/* Some Hidden Inputs For provider */}
                {form.email_subject &&
                  (contact_form_provider === "formsubmit.co" &&
                  contact_form_provider === "formspree" ? (
                    <input
                      type="hidden"
                      name="_subject"
                      value={form.email_subject}
                    />
                  ) : (
                    <input
                      type="hidden"
                      name="subject"
                      value={form.email_subject}
                    />
                  ))}

                {contact_form_provider === "formsubmit.co" && (
                  <input type="hidden" name="_template" value="table" />
                )}

                {form.inputs.map((input) => (
                  <div
                    input-wrapper
                    class:list={[
                      "flex flex-col",
                      !input.half_width ? "col-span-2" : "max-sm:col-span-2",
                      input.parent_class,
                    ]}>
                    {!input.note &&
                      input.type !== "checkbox" &&
                      input.type !== "radio" &&
                      (input.group_label || input.label) && (
                        <label for="name" class="form-label">
                          {input.group_label ||
                            input.label ||
                            "Please set label"}
                          {input.required && (
                            <span class="text-primary">*</span>
                          )}
                        </label>
                      )}
                    {input.dropdown ? (
                      <div id="validation-target">
                        <select
                          {...(input.label && { "data-name": input.label })}
                          {...(input.id && { id: input.id })}
                          name={
                            input.name || input.label || "Please set name value"
                          }
                          data-hs-select={`{
                          ${input.dropdown.type === "search" ? `\"hasSearch\": true,` : `\"hasSearch\": false,`}
                          \n\"searchPlaceholder\": \"${input.dropdown.type === "search" ? input.dropdown.search?.placeholder || "Please set placeholder" : ""}\",\n
                          \"searchClasses\": \"form-input hs-dropdown-search-input\",
                          \n\"searchWrapperClasses\": \"hs-search-input-wrapper\",
                          \n\"placeholder\": \"${input.placeholder || "Please set placeholder"}\",
                          \n\"toggleTag\": \"<button type=\\\"button\\\" aria-expanded=\\\"false\\\"><span class=\\\"text-text-default \\\" data-title><\/span><\/button>\",
                          \n\"toggleClasses\": \"form-input hs-select-disabled:pointer-events-none hs-select-disabled:opacity-50 relative ps-4 pe-9 flex gap-x-2 text-nowrap w-full cursor-pointer border border-gray-200 text-start focus:shadow-none focus:outline-none focus:ring-1 focus:ring-primary\",\n\"dropdownClasses\": \"hs-dropdown mt-2 max-h-72 space-y-0.5 z-20 w-full border border-gray-200 overflow-hidden overflow-y-auto [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-100 [&::-webkit-scrollbar-thumb]:bg-gray-300\",\n\"optionClasses\": \"hs-dropdown-search-item\",\n\"optionTemplate\": \"<div><div class=\\\"flex items-center\\\"><div class=\\\"text-inherit \\\" data-title><\/div><\/div><\/div>\",
                          \"optionTemplate\": \"<div class=\\\"text-inherit flex justify-between items-center w-full\\\"><span data-title><\/span><span class=\\\"hidden hs-selected:block\\\"><svg class=\\\"shrink-0 size-3.5 text-inherit \\\" xmlns=\\\"http:.w3.org\/2000\/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"><polyline points=\\\"20 6 9 17 4 12\\\"\/><\/svg><\/span><\/div>\",
                          \"extraMarkup\": [\n      \"<div class=\\\"hidden hs-error:block absolute top-1/2 end-8 -translate-y-1/2\\\"><svg class=\\\"shrink-0 size-4 text-inherit\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\"\/><line x1=\\\"12\\\" x2=\\\"12\\\" y1=\\\"8\\\" y2=\\\"12\\\"\/><line x1=\\\"12\\\" x2=\\\"12.01\\\" y1=\\\"16\\\" y2=\\\"16\\\"\/><\/svg><\/div>\",\n      \"<div class=\\\"hidden hs-success:flex absolute inset-y-0 end-8 items-center pointer-events-none\\\"><svg class=\\\"shrink-0 size-4 text-inherit\\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"><polyline points=\\\"20 6 9 17 4 12\\\"\/><\/svg><\/div>\",\n      \"<div class=\\\"absolute top-1\/2 end-3 -translate-y-1\/2\\\"><svg class=\\\"shrink-0 size-3.5 text-inherit \\\" xmlns=\\\"http:\/\/www.w3.org\/2000\/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"><path d=\\\"m7 15 5 5 5-5\\\"\/><path d=\\\"m7 9 5-5 5 5\\\"\/><\/svg><\/div>\"\n    ]
                          }`}
                          class="hidden">
                          <option value="">Choose</option>
                          {input.dropdown?.items?.map((option) => (
                            <option
                              {...(option.selected && { selected: true })}
                              value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        <p class="hs-error:block mt-2 hidden text-sm text-red-600">
                          Please select a valid state.
                        </p>
                        <p class="hs-success:flex mt-2 hidden text-sm text-white">
                          Perfect!
                        </p>
                      </div>
                    ) : input.tag === "textarea" ? (
                      <textarea
                        rows={input.rows || "6"}
                        name={
                          input.name || input.label || "Please set name value"
                        }
                        placeholder={
                          input.placeholder || "Please set placeholder"
                        }
                        class="form-input"
                        {...(input.required && { required: true })}
                        set:html={input.default_value || ""}
                      />
                    ) : input.group || input.items ? (
                      <div class="form-check-wrapper">
                        {input.items?.map((input) => (
                          <div class="form-check">
                            <input
                              {...{
                                value:
                                  typeof input.value === "boolean"
                                    ? String(input.value)
                                    : input.value || input.label,
                                checked: input.checked ? true : undefined,
                              }}
                              type={input.type || "text"}
                              name={
                                input.name ||
                                input.group_label ||
                                "Please set name value"
                              }
                              id={
                                input.id ||
                                genIdFromLabel(input.label || "example-id")
                              }
                              placeholder={
                                input.placeholder || "Please set placeholder"
                              }
                              class:list={[
                                input.type === "radio"
                                  ? "form-radio"
                                  : "form-checkbox",
                              ]}
                              {...(input.required && { required: true })}
                            />
                            <label
                              for={
                                input.id ||
                                genIdFromLabel(input.label || "example-id")
                              }
                              class="form-check-label"
                              set:html={
                                markdownify(input.label) || "Example Label"
                              }
                            />
                          </div>
                        ))}
                      </div>
                    ) : input.type === "checkbox" || input.type === "radio" ? (
                      <div class="form-check">
                        <input
                          {...{
                            value:
                              typeof input.value === "boolean"
                                ? String(input.value)
                                : input.value || input.label,
                            checked: input.checked ? true : undefined,
                          }}
                          type={input.type || "text"}
                          name={input.name || "Please set name value"}
                          id={
                            input.id ||
                            genIdFromLabel(input.label || "example-id")
                          }
                          placeholder={
                            input.placeholder || "Please set placeholder"
                          }
                          class:list={[
                            input.type === "radio"
                              ? "form-radio"
                              : "form-checkbox",
                          ]}
                          {...(input.required && { required: true })}
                        />
                        <label
                          for={
                            input.id ||
                            genIdFromLabel(input.label || "example-id")
                          }
                          class="form-check-label"
                          set:html={markdownify(input.label) || "Example Label"}
                        />
                      </div>
                    ) : input.note ? (
                      <div
                        {...{ "data-default": input.content }}
                        class:list={[
                          "prose-styles border p-4 text-sm",
                          input.note === "info"
                            ? "prose-p:text-slate-400 border-blue-400/25 bg-slate-600/10"
                            : input.note === "warning"
                              ? "prose-p:text-orange-400 border-amber-400/25 bg-orange-600/10"
                              : input.note === "success"
                                ? "prose-p:text-green-400 border-green-400/25 bg-green-600/10"
                                : input.note === "deprecated"
                                  ? "prose-p:text-stone-400 border-green-400/25 bg-stone-600/10"
                                  : input.note === "hint"
                                    ? "prose-p:text-purple-400 border-purple-400/25 bg-purple-600/10"
                                    : "prose-p:text-gray-400 border-gray-400/25 bg-gray-600/10",
                        ]}
                        set:html={markdownify(input.content || "", true)}
                      />
                    ) : (
                      <input
                        {...(input.default_value && {
                          value: input.default_value,
                        })}
                        type={input.type || "text"}
                        name={
                          input.name || input.label || "Please set name value"
                        }
                        placeholder={
                          input.placeholder || "Please set placeholder"
                        }
                        class="form-input"
                        {...(input.required && { required: true })}
                      />
                    )}
                  </div>
                ))}

                {form.submit_button && (
                  <div class="col-span-2 mt-4 flex flex-col">
                    <button
                      type="submit"
                      class:list={[
                        "btn btn-md btn-primary btn-has-icon group relative inline-flex w-fit overflow-hidden",
                        "relative z-0 flex items-center gap-4",
                      ]}>
                      {form.submit_button.label}
                      <span class="flex h-6 w-12 items-center justify-center rounded-full bg-white/15">
                        <OptimizedImage
                          alt="icon"
                          class="h-5 w-5 transition-all duration-300 group-hover:rotate-180"
                          src="/images/icons/svg/star.svg"
                        />
                      </span>
                    </button>
                  </div>
                )}
                {form.note && (
                  <div
                    class="prose-a:text-primary prose-a:underline prose-a:underline-offset-2 col-span-2 flex flex-col text-sm/normal"
                    set:html={markdownify(form.note, true)}
                  />
                )}
              </form>
            </div>
          )}
        </div>
      </div>
    </section>
  )
}

<!-- https://preline.co/docs/select.html -->
<script>
  import "@preline/select";
  import {
    formspreeSubmit,
    netlifySubmit,
    formSubmit,
    isFormFilled,
    setMessage,
    validateSelectTag,
  } from "@/lib/utils/FormHandle";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(
      "contact-form",
    ) as HTMLFormElement | null;

    let selectTags = form?.querySelectorAll(
      "[input-wrapper]:not(.hidden) select[data-hs-select]",
    ) as NodeListOf<HTMLSelectElement>;

    selectTags.forEach((tag) => {
      tag.addEventListener("change", () => {
        // Ensure only visible select tag value should submitted
        selectTags.forEach((tag) => {
          const name = tag.getAttribute("data-name");
          tag.setAttribute("name", name || "");
        });

        validateSelectTag(tag);
      });
    });

    form?.addEventListener("submit", async (e: Event) => {
      e.preventDefault();

      const provider = form?.getAttribute("data-provider") || "";
      const action = form?.getAttribute("data-action") || "";

      selectTags = form?.querySelectorAll(
        "[input-wrapper]:not(.hidden) select[data-hs-select]",
      ) as NodeListOf<HTMLSelectElement>;

      // Validate all preline select tags
      selectTags.forEach(validateSelectTag);

      if (isFormFilled(form)) {
        // Console.log form data for debugging
        // const formData = Object.fromEntries(new FormData(form).entries());
        // console.log(
        //   Object.entries(formData)
        //     .map(([key, value]) => `${key}: ${value}`)
        //     .join("\n\n"),
        // );

        setMessage("Form Submitting!...", true, true, form);

        try {
          switch (provider) {
            case "netlify":
              await netlifySubmit(form, action);
              break;
            case "formsubmit.co":
              await formSubmit({
                form,
                action,
              });
              break;
            case "formspree":
              await formspreeSubmit(
                Object.fromEntries(new FormData(form).entries()),
                5000,
                form,
              );
              break;
            default:
              throw new Error("Unknown form provider.");
          }
        } catch (error) {
          setMessage(
            error +
              "! Please use this mail - [upstart-astro-theme@gmail.com](mailto:upstart-astro-theme@gmail.com) to submit a ticket!",
            false,
            false,
            form,
          );
        }
      }
    });
  });
</script>
