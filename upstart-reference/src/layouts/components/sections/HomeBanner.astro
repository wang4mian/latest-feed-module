---
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import { markdownify } from "@/lib/utils/textConverter";
import type { Button, Section } from "@/types";
import OptimizedImage from "@/components/utilities/OptimizedImage.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import Customers from "./Customers.astro";
import { plainify } from "@/lib/utils/textConverter";
import ButtonLink from "../buttons/ButtonLink.astro";
import VideoModal from "../widgets/VideoModal.astro";
import AnimatedText from "../widgets/AnimatedText.astro";
import type { customersSectionType } from "@/types";

// Type for this section data
type home_banner_section_type = Section & {
  buttons: Button[];
  customers: customersSectionType;
};

type Props = {
  content?: home_banner_section_type;
};

// Fetching the default content for the this section
let default_content = (
  await getEntryCTM("sections", "home-banner", Astro.currentLocale)
)?.data as home_banner_section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as home_banner_section_type;

// Extracting required values from 'content' object
let { title, customers, description, image, buttons } =
  actual_content as home_banner_section_type;

const videoButton = buttons.find((button) => button.type === "video");
---

<section>
  <div class="banner-gradient stretched-link relative">
    <div class="container">
      <div class="relative z-10 mx-auto max-w-4xl space-y-10">
        <div>
          {
            title && (
              <AnimatedText
                class="has-italic-text font-secondary mb-6 text-center text-5xl text-white capitalize md:text-7xl/tight"
                content={markdownify(title)}
              />
            )
          }
          {
            description && (
              <AnimatedText
                class="text-center text-lg/normal"
                stagger={0.03}
                delay={0.3}
                content={markdownify(description)}
              />
            )
          }
        </div>
        <div
          data-aos="fade-in"
          data-aos-delay="400"
          data-aos-duration="900"
          class="has-video-modal flex flex-wrap items-center justify-center gap-5">
          {
            buttons &&
              buttons.map((button: Button) =>
                button.type !== "video" ? (
                  <ButtonLink
                    content={button}
                    class="btn-md btn-primary btn-has-icon group relative z-0 flex items-center gap-4 [&>.label]:z-20">
                    <span class="flex h-6 w-12 items-center justify-center rounded-full bg-white/15">
                      <OptimizedImage
                        alt="icon"
                        class="h-5 w-5 transition-all duration-300 group-hover:rotate-180"
                        src="/images/icons/svg/star.svg"
                      />
                    </span>
                  </ButtonLink>
                ) : (
                  <ButtonLink
                    tag={"button"}
                    content={button}
                    type="button"
                    title="Play Video"
                    aria-haspopup="dialog"
                    aria-expanded="false"
                    aria-controls={"#" + button.video?.id}
                    data-hs-overlay={"#" + button.video?.id}
                    data-hs-overlay-options={`{"emulateScrollbarSpace" : true}`}
                    class="video-modal-toggle btn-md btn-primary btn-has-icon group after:bg-primary/25 relative z-0 flex items-center gap-4 after:pointer-events-none after:absolute after:inset-0 after:z-10 after:size-full [&>.label]:z-20">
                    <span class="has-animated-waves waves-white waves-sm relative z-20 flex h-6 w-6 items-center justify-center rounded-full">
                      <OptimizedImage
                        alt="icon"
                        inlineSvg={true}
                        class="text-primary ml-px h-2 w-2"
                        src="/images/icons/svg/play-icon.svg"
                      />
                    </span>

                    {/* Background Images */}
                    {button?.video?.src && (
                      <video
                        autoplay
                        muted
                        loop
                        playsinline
                        class="absolute top-0 left-0 z-0 z-10 h-full w-full object-cover"
                        {...{
                          src: button?.video?.src.startsWith("http")
                            ? button?.video?.src
                            : null,
                        }}>
                        {!button?.video?.src.startsWith("http") && (
                          <source src={button?.video?.src} type="video/mp4" />
                        )}
                        Your browser does not support the video tag.
                      </video>
                    )}
                  </ButtonLink>
                ),
              )
          }
        </div>

        <Customers
          content={customers}
          data-aos-delay="600"
          data-aos-duration="900"
          data-aos="fade-in"
        />
      </div>
    </div>

    <!-- Banner Image -->
    {
      image && (
        <div
          data-aos="fade-up-sm"
          data-aos-delay="800"
          data-aos-offset="0"
          class="relative mx-4 mt-12 -mb-4 max-w-screen-xl md:m-0 md:mx-auto md:mt-20">
          <div class="bg-body relative z-10 overflow-hidden rounded-t-2xl px-[2px] pt-[2px] md:rounded-t-3xl">
            <div class="after:bg-primary/10 relative z-20 overflow-hidden rounded-t-2xl bg-black after:absolute after:inset-0 after:size-full after:rounded-t-2xl after:content-[''] md:rounded-t-3xl">
              <OptimizedImage
                class="rounded-t-2xl md:rounded-t-3xl"
                src={image}
                alt={"About " + plainify(title).toLowerCase()}
              />
            </div>

            {/* Gradient Animated Background Image */}
            <div
              class="home-banner from-body to-primary absolute top-1/2 left-1/2 z-10 h-screen w-1/2 origin-[0%_15%] bg-gradient-to-l"
              aria-hidden="true"
            />
          </div>
        </div>
      )
    }
  </div>

  {
    videoButton && (
      <VideoModal
        video={{
          id: videoButton.video?.id,
          src: videoButton.video?.src,
          provider: videoButton.video?.provider,
        }}
      />
    )
  }
</section>
