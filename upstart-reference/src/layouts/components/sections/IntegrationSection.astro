---
import { getCollectionCTM, getEntryCTM } from "@/lib/contentParser.astro";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import { markdownify } from "@/lib/utils/textConverter";
import type { MarqueeConfig, Section } from "@/types";
import Subtitle from "@/layouts/components/widgets/Subtitle.astro";
import Marquee from "../widgets/Marquee.astro";
import OptimizedImage from "../utilities/OptimizedImage.astro";
import { config } from "@/lib/utils/toml-files";

// Type for this section data
type section_type = Section & {
  list: {
    title: string;
    description: string;
  }[];
  marquee: MarqueeConfig;
};
type Props = {
  content?: section_type;
};

// Fetching the default content for the this section
let default_content = (
  await getEntryCTM("sections", "integration-section", Astro.currentLocale)
)?.data as section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as section_type;

// Extracting required values from 'content' object
let { title, subtitle, marquee } = actual_content as section_type;

let integrations = await getCollectionCTM(
  config.settings.integration_folder as "integration",
  Astro.currentLocale,
);

let duplicatedIntegrations = integrations;
let integrationsForRoundedMarquee = Array.from({ length: 10 }, () => [
  ...integrations,
])
  .flat()
  .slice(0, 34);

// If list length is less then 3 then duplicate the list at at least 3 times
if (duplicatedIntegrations.length <= 3) {
  duplicatedIntegrations = Array.from({ length: 6 }, () => [
    ...duplicatedIntegrations,
  ]).flat();
} else if (duplicatedIntegrations.length <= 6) {
  duplicatedIntegrations = Array.from({ length: 3 }, () => [
    ...duplicatedIntegrations,
  ]).flat();
}
---

<section>
  <div class="overflow-hidden md:space-y-16">
    <div class="container">
      {
        title && (
          <div class="mx-auto max-w-2xl text-center" data-aos="fade-up-sm">
            <Subtitle content={subtitle} />
            <h2
              class="has-italic-text capitalize"
              set:html={markdownify(title)}
            />
          </div>
        )
      }
    </div>
    <div
      class="space-y-12 md:space-y-16"
      data-aos="fade-up-sm"
      data-aos-delay="200">
      <div
        class="container max-h-[calc(44vw_+_10px)] overflow-hidden sm:max-h-[calc(34vw_+_10px)] lg:max-h-[calc(2vw_+_350px)] xl:max-h-[calc(2vw_+_450px)]">
        <div
          class="relative flex size-full items-center justify-center px-10 py-32 md:px-20">
          <!-- Integration Icon List -->
          <div
            class="integration-wrapper absolute inset-0 z-20 size-full min-w-full rounded-full">
            {
              integrationsForRoundedMarquee
                .filter((item) => item.data.image)
                .map((item, i) => (
                  <div class="icon bg-primary/15 !invisible absolute size-[calc(1vw+40px)] rounded-full p-3 even:invisible sm:size-[calc(.5vw+60px)] even:md:visible">
                    <OptimizedImage
                      key={i}
                      src={item.data.image as string}
                      alt="icon"
                      width={50}
                      height={50}
                      className="border rounded-full size-full"
                    />
                  </div>
                ))
            }
          </div>
          <div
            class="border-primary/25 relative mx-auto flex aspect-square max-w-[90rem] items-center justify-center overflow-hidden rounded-full border bg-transparent md:w-full">
            <!-- Circle Gradient Background -->
            <div
              class="translate-centered border-body from-primary to-body absolute inset-0 z-20 m-[1px] size-full rounded-full [border-width:calc(1vw+15px)] bg-gradient-to-b to-30%">
            </div>

            <!-- Circle For Animated Border -->
            <div
              class="after:top-30% after:via-primary h-[90rem] w-[90rem] [animation:spin-integration-border_4s_infinite] rounded-full border after:absolute after:top-0 after:left-0 after:z-0 after:h-1/2 after:w-1/2 after:bg-gradient-to-r after:from-transparent after:from-10% after:via-20% after:to-transparent after:content-['']">
            </div>
          </div>
        </div>
      </div>

      <!-- Integration Name List -->
      {
        duplicatedIntegrations && (
          <Marquee
            marqueeElements={duplicatedIntegrations.length}
            marqueePauseOnHover={marquee.pause_on_hover}
            marqueeReverse={marquee.reverse}
            marqueeDuration={marquee.duration}
            marqueeElementWidth={marquee.element_width}
            marqueeElementWidthAuto={marquee.element_width_auto}
            marqueeElementWidthResponsive={
              marquee.element_width_in_small_devices
            }>
            {duplicatedIntegrations.map((item) => (
              <div
                class:list={[
                  "max-h-full min-w-[var(--marquee-element-width-responsive)] px-4 text-center md:min-w-[var(--marquee-element-width)]",
                ]}>
                <div class="flex items-center gap-4 md:gap-8">
                  <div
                    class="font-secondary text-xl font-medium whitespace-nowrap text-white md:text-3xl"
                    set:html={markdownify(item.data.title)}
                  />
                  <OptimizedImage
                    inlineSvg={true}
                    src={"/images/icons/svg/star-rotate.svg"}
                    alt={"icon"}
                    width={40}
                    height={40}
                    class="text-primary size-5 h-auto md:size-10"
                  />
                </div>
              </div>
            ))}
            {duplicatedIntegrations.map((item) => (
              <div
                class:list={[
                  "max-h-full min-w-[var(--marquee-element-width-responsive)] px-4 text-center md:min-w-[var(--marquee-element-width)]",
                ]}>
                <div class="flex items-center gap-4 md:gap-8">
                  <div
                    class="font-secondary text-xl font-medium whitespace-nowrap text-white md:text-3xl"
                    set:html={markdownify(item.data.title)}
                  />
                  <OptimizedImage
                    inlineSvg={true}
                    src={"/images/icons/svg/star-rotate.svg"}
                    alt={"icon"}
                    width={40}
                    height={40}
                    class="text-primary size-5 h-auto md:size-10"
                  />
                </div>
              </div>
            ))}
          </Marquee>
        )
      }
    </div>
  </div>
</section>

<script>
  const wrapper = document.querySelector(".integration-wrapper") as HTMLElement;
  const icons = wrapper.querySelectorAll(".icon") as NodeListOf<HTMLElement>;
  const total = icons.length;

  // Function to remove the invisible class and position icons
  function initIcons() {
    icons.forEach((icon) => {
      icon.classList.remove("!invisible");
    });
    positionIcons();
  }

  function positionIcons() {
    // Use clientWidth/clientHeight for more stable dimensions
    const width = wrapper.clientWidth;
    const height = wrapper.clientHeight;
    const radius = Math.min(width, height) / 2 + 0;

    icons.forEach((icon, index) => {
      const angle = (index / total) * 2 * Math.PI;
      const x = radius * Math.cos(angle);
      const y = radius * Math.sin(angle);
      icon.style.left = `calc(50% + ${x}px)`;
      icon.style.top = `calc(50% + ${y}px)`;
    });
  }

  // Run when everything is loaded (ensures CSS and images are ready)
  window.addEventListener("load", initIcons);

  window.addEventListener("resize", () => {
    positionIcons();
  });
</script>
