---
import { markdownify } from "@/lib/utils/textConverter";
import "@/plugins/odometer/odometer.min.css";

interface Props {
  class?: string;
  animate_on?: "click" | undefined;
  transition_time?: string;
  child_class?: string;
  enable?: boolean;
  content: {
    value?: string | number;
    type?: string; // pricing tye (applicable for pricing page)
    prepend_value?: string;
    append_value?: string;
  };
}

const {
  enable = true,
  animate_on,
  transition_time,
  class: className,
  child_class: childClassName,
  content,
} = Astro.props;

// Check number char length and give that number of zero
const addZero = (content: string) => {
  return "0".repeat(Number(content.length));
};
---

<div
  class:list={[
    "font-secondary inline-flex place-items-stretch leading-none",
    { "has-animated-number": enable },
    className,
  ]}>
  {
    content.prepend_value && (
      <span
        class:list={["prepend", childClassName]}
        set:html={markdownify(content.prepend_value)}
      />
    )
  }

  <span
    {...{
      "data-count": content.value || undefined,
      "data-type": content.type && content.type.toLowerCase(),
      style: { "--odometer-duration": transition_time },
    }}
    class:list={[{ odometer: enable }, childClassName]}
    set:html={enable && content.value && animate_on !== "click"
      ? addZero(content.value as string)
      : content.value}
  />

  {
    content.append_value && (
      <span
        class:list={["append", childClassName]}
        set:html={markdownify(content.append_value)}
      />
    )
  }
</div>
<script>
  import "@/plugins/odometer/odometer.min.js";
</script>
