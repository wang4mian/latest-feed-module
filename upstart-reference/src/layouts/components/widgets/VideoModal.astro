---
import ReactIcons from "@/helpers/ReactIcons.astro";
import type { VideoConfig } from "@/types";

interface Props {
  video: VideoConfig;
}

const { video } = Astro.props;
let { src, provider = "youtube", poster, autoplay = true, type, id } = video;

// Default settings (https://github.com/sampotts/plyr?tab=readme-ov-file#options)
const config = {
  hideControls: false,
  debug: false,
  iconUrl: "/plyr/plyr.svg",
  blankVideo: "/plyr/blank.mp4",
  youtube: {
    noCookie: true,
  },
};

const isLocalHostedVideo = src?.includes("/videos/") && provider === "html5";
---

{
  src && (
    <div
      id={id}
      class="hs-overlay pointer-events-none fixed start-0 top-0 z-[60] hidden size-full overflow-x-hidden overflow-y-auto"
      role="dialog"
      tabindex="-1">
      <div class="hs-overlay-animation-target hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 mt-0 flex min-h-[calc(100%-3.5rem)] items-center opacity-0 transition-[margin,opacity] ease-out sm:mx-auto sm:w-full sm:max-w-4xl">
        <div class="has-video-player pointer-events-auto container flex flex-col">
          <button
            type="button"
            aria-label="Close"
            data-hs-overlay={`#${id}`}
            data-hs-overlay-options={`{"emulateScrollbarSpace" : true}`}
            class="mb-2 ml-auto flex h-10 w-10 items-center justify-center rounded-full bg-white ring-0 ring-white/50 duration-300 hover:rotate-90 hover:ring-4">
            <span class="sr-only">Close</span>
            <ReactIcons icon="IoCloseSharp" class="text-dark/80 h-6 w-6" />
          </button>
          {isLocalHostedVideo ? (
            <video
              class="video-player"
              playsinline
              controls
              {...{
                "data-id": `${id}`,
                "data-autoplay": `${autoplay === true ? "true" : "false"}`,
                "data-poster": poster || undefined,
                "data-plyr-config": `${JSON.stringify(config)}`,
              }}>
              <source src={src} type={type} />
            </video>
          ) : (
            <div
              class="video-player"
              {...{
                "data-autoplay": `${autoplay === true ? "true" : "false"}`,
                "data-id": `${id}`,
                "data-plyr-provider": provider || undefined,
                "data-plyr-embed-id": src || undefined,
                "data-plyr-poster": poster || undefined,
                "data-plyr-config": `${JSON.stringify(config)}`,
              }}
            />
          )}
        </div>
      </div>
    </div>
  )
}

<script>
  // @ts-nocheck
  import AOS from "aos";
  import "preline/src/plugins/overlay";

  const videoButtons = document.querySelectorAll(
    "[data-hs-overlay].video-modal-toggle",
  );

  /**
   * Observes when the "aos-animate" class is added to an element and removes
   * the `data-aos` and `data-aos-delay` attributes after a 500ms delay.
   *
   * Use case: This function is useful when you want to remove certain AOS-specific
   * attributes after the element has finished its animation, triggered by the `aos-animate` class. Currently, fixing an issue with preline overlay (video modal) not working if * any nearest parent of it has aos animation. This is a temporary solution until the issue is fixed in preline.
   */
  function removeAosAttributesAfterAnimation() {
    // Function to handle mutations and remove AOS attributes
    const handleAosAnimateClass = (mutationsList: MutationRecord[]) => {
      mutationsList.forEach((mutation: MutationRecord) => {
        // Check if the "aos-animate" class was added to the element
        if (
          mutation.type === "attributes" &&
          mutation.target.classList.contains("aos-animate")
        ) {
          // Set a timeout to remove the AOS attributes after 500ms
          setTimeout(() => {
            mutation.target.removeAttribute("data-aos");
            mutation.target.removeAttribute("data-aos-delay");
          }, 1000); // Delay before removing the attributes
        }
      });
    };

    // Select the element to observe
    const content = document.querySelector(".has-video-modal");

    if (content) {
      // Create a MutationObserver to detect class changes
      const observer = new MutationObserver(handleAosAnimateClass);

      // Configure the observer to watch for class attribute changes
      observer.observe(content, {
        attributes: true, // Observe attribute changes (for class changes)
        attributeFilter: ["class"], // Only monitor the 'class' attribute
      });
    }
  }

  // Call the function when you need to monitor the element with the "content" class.
  removeAosAttributesAfterAnimation();

  videoButtons.forEach((button) => {
    button.addEventListener("click", async () => {
      try {
        // Dynamically import Plyr and its css
        const { default: Plyr } = await import("plyr");
        await import("plyr/dist/plyr.css");

        const players = Plyr.setup(".video-player") as Plyr[];

        players?.forEach((player) => {
          let video_elem = player.elements.original as HTMLVideoElement;
          const autoplayAttr = video_elem?.getAttribute("data-autoplay");
          const id = video_elem?.getAttribute("data-id");
          const isAutoplay = autoplayAttr === "true" ? true : false;

          // Play Video when Modal Open
          document.addEventListener("open.hs.overlay", function (event: any) {
            const overlayElement = event.detail;

            // Check if the opened modal is the video modal
            const isVideoModal =
              overlayElement.payload.getAttribute("id") === id;

            if (isVideoModal && isAutoplay) player.ready && player.play();
          });

          // Pause Video when Modal Close
          document.addEventListener("close.hs.overlay", function (event: any) {
            const overlayElement = event.detail;

            // Check if the opened modal is the video modal
            const isVideoModal =
              overlayElement.payload.getAttribute("id") === id;

            if (isVideoModal && !player.pip) player.ready && player.pause();
          });
        });
      } catch (error) {
        console.error("Failed to load Plyr", error);
      }
    });
  });
</script>
