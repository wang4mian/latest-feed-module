---
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import CallToAction from "@/components/sections/CallToAction.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import BlogSection from "@/components/sections/BlogSection.astro";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const { blog_folder }: { blog_folder: "blog" } = config.settings;
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;

      const postIndex = await getEntryCTM(
        blog_folder,
        "-index",
        lang.languageCode,
      );

      const posts = await getCollectionCTM(blog_folder, lang.languageCode);
      const totalPages = Math.ceil(posts.length / config.settings.pagination);
      const paths = [];

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (postIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      // Disable page generation if config.settings.pagination is 0 or false
      if (config.settings.pagination === 0 || !config.settings.pagination) {
        return [];
      }

      for (let i = 1; i < totalPages; i++) {
        paths.push({
          params: {
            slug: (i + 1).toString(),
          },
        });
      }

      return paths.map((path) => ({
        params: {
          slug: path.params.slug,
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
        },
        props: {
          postIndex,
          pagination: config.settings.pagination,
          blogCollection: posts,
        },
      }));
    }),
  );

  return paths.flat();
}

const { slug } = Astro.params;
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
let { postIndex } = Astro.props;
---

<Base {...postIndex?.data}>
  <BlogSection pagination={{ enable: true, currentPage: currentPage }} />
  <CallToAction />
</Base>
