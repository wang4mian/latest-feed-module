---
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import {
  supportedLanguages,
  useTranslations,
} from "@/lib/utils/languageParser.ts";
import IntegrationSingle from "@/components/IntegrationSingle.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import { config } from "@/lib/utils/toml-files";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const { integration_folder }: { integration_folder: "integration" } =
        config.settings;
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;

      const integrationIndex = await getEntryCTM(
        integration_folder,
        "-index",
        lang.languageCode,
      );

      let services = await getCollectionCTM(
        integration_folder,
        lang.languageCode,
      );

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (integrationIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return services.map((service) => ({
        params: {
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
          single: service.data?.custom_slug || service.slug.split("/").pop(),
        },
        props: {
          service,
        },
      }));
    }),
  );

  return paths.flat();
}

const { service } = Astro.props;
const t = await useTranslations(Astro.currentLocale as string);
---

<Base {...service.data}>
  <IntegrationSingle content={service} translations={t} />
  <CallToAction />
</Base>
