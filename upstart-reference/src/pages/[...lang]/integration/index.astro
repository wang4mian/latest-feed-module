---
import Base from "@/layouts/Base.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import handleDraftPage from "@/lib/utils/handleDraftPage";
import CallToAction from "@/components/sections/CallToAction.astro";
import { generatePaths } from "@/lib/utils/languageParser.ts";
import IntegrationList from "@/components/sections/IntegrationList.astro";
import { config } from "@/lib/utils/toml-files";
import IntegrationSection from "@/components/sections/IntegrationSection.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";

export function getStaticPaths() {
  return generatePaths();
}

const entry = await getEntryCTM(
  config.settings.integration_folder as "integration",
  "-index",
  Astro.currentLocale,
);

// Remove drafts pages in production
const response = handleDraftPage(entry?.data);
if (response) return response;

let integrationsCategories = await getTaxonomy(
  config.settings.integration_folder as "integration",
  "categories",
  Astro.currentLocale,
);

// Remove category that defined in integration -index.md under sections frontmatter
if (entry?.data.sections) {
  entry.data.sections.forEach((section) => {
    if (section.category) {
      integrationsCategories = integrationsCategories.filter(
        (category) => category.name !== section.category,
      );
    }
  });
}
---

<Base {...entry?.data}>
  <IntegrationSection />
  {
    entry.data.sections?.map((section) => (
      <IntegrationList content={section} collection={entry.collection} />
    ))
  }

  {
    integrationsCategories?.map((category) => (
      <IntegrationList
        content={{ category: category.name }}
        collection={entry.collection}
      />
    ))
  }
  <CallToAction />
</Base>
